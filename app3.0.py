# -*- coding: utf-8 -*-
"""
AI 趨勢分析 Streamlit 應用程式
專家增強最終版實作 (V8.0 - Final UI & Logic Fusion)

本應用程式根據一份詳細的金融分析工具設定文件進行開發，並融合了專業級的
app2.0.py 設計 logique 與使用者提供的 UI 視覺設計稿，旨在提供一個外觀精美、
互動專業的決策儀表板。

核心功能：
- [重大升級] 引入 app2.0 的響應式 UI 架構 (st.session_state)，實現即時互動
- [視覺升級] 整合玻璃擬態 (Glassmorphism) 按鈕風格
- [保留] 維持 V7.7 的多指標分析內核 (MFI, Williams %R, Supertrend等)
- [保留] 維持 V7.7 的四層專業技術分析圖表
- [優化] 融合 st.metric 與 st.dataframe 的優雅佈局
- [標準化] 統一所有分析表格 (AI判讀, 技術指標, 回測) 的色彩邏輯 (紅=多頭, 綠=空頭, 鮭魚色=中性)
- [升級] 引入籌碼面(機構持股)與多種新技術指標，實現多維度決策
- [修復/升級] 完整實作並升級為 Mark-to-Market 視覺化策略回測報告
- 擴充資產庫與智慧搜尋
- 精煉版技術指標計算引擎 (TA-Lib)
- AI 融合信號生成模型

開發者：AI (Generated by Gemini)
版本：8.0.0 (Final UI & Logic Fusion)
"""

# 載入核心套件
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import ta
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re

# --- 1. 應用程式全域設定與靜態資料 ---

# 設置頁面配置
st.set_page_config(
    page_title="AI趨勢分析📈",
    page_icon="🚀",
    layout="wide"
)

# (UPDATED v8.0) 融合 app2.0 的 CSS
st.markdown("""
<style>
    /* 側邊欄的主要分析按鈕 - 核心玻璃化設置 (鮭魚色：#FA8072) */
    [data-testid="stSidebar"] .stButton button {
        color: #FA8072 !important; /* 淡橙色文字 */
        background-color: rgba(255, 255, 255, 0.1) !important; /* 透明背景 */
        border-color: #FA8072 !important; /* 淡橙色邊框 */
        border-width: 1px !important;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08); 
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    /* 懸停 (Hover) 效果 */
    [data-testid="stSidebar"] .stButton button:hover {
        color: #E9967A !important; 
        background-color: rgba(250, 128, 114, 0.15)  !important; 
        border-color: #E9967A !important;
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15); 
    }
    /* 點擊 (Active/Focus) 效果 */
    [data-testid="stSidebar"] .stButton button:active,
    [data-testid="stSidebar"] .stButton button:focus {
        color: #FA8072 !important;
        background-color: rgba(250, 128, 114, 0.25) !important;
        border-color: #E9967A !important;
        box-shadow: none !important; 
    }
    /* 修正主標題顏色 */
    h1 { color: #cc6600; } 
    /* st.metric樣式覆蓋 */
    [data-testid="stMetricValue"] { font-size: 20px; }
    [data-testid="stMetricLabel"] { font-size: 13px; }
    [data-testid="stMetricDelta"] { font-size: 12px; }
    /* 自訂行動建議文字顏色 */
    .action-buy { color: #dc3545; font-weight: bold; }
    .action-sell { color: #28a745; font-weight: bold; }
    .action-neutral { color: #FA8072; font-weight: bold; }
    .action-hold-buy { color: #FA8072; font-weight: bold; }
    .action-hold-sell { color: #80B572; font-weight: bold; }
</style>
""", unsafe_allow_html=True)


# (UPDATED v8.0) 擴充後的資產庫
FULL_SYMBOLS_MAP = {
    "TSLA": {"name": "特斯拉", "keywords": ["特斯拉", "電動車", "TSLA", "Tesla"]},
    "NVDA": {"name": "輝達", "keywords": ["輝達", "英偉達", "AI", "NVDA", "Nvidia"]},
    "AAPL": {"name": "蘋果", "keywords": ["蘋果", "Apple", "AAPL"]},
    "GOOGL": {"name": "谷歌/Alphabet", "keywords": ["谷歌", "Alphabet", "GOOGL", "GOOG"]},
    "MSFT": {"name": "微軟", "keywords": ["微軟", "Microsoft", "MSFT"]},
    "AMZN": {"name": "亞馬遜", "keywords": ["亞馬遜", "Amazon", "AMZN"]},
    "META": {"name": "Meta/臉書", "keywords": ["臉書", "Meta", "FB", "META"]},
    "^GSPC": {"name": "S&P 500 指數", "keywords": ["標普", "S&P500", "^GSPC", "SPX"]},
    "SPY": {"name": "SPDR 標普500 ETF", "keywords": ["SPY", "標普ETF"]},
    "QQQ": {"name": "Invesco QQQ Trust", "keywords": ["QQQ", "納斯達克ETF"]},
    "2330.TW": {"name": "台積電", "keywords": ["台積電", "2330", "TSMC"]},
    "2317.TW": {"name": "鴻海", "keywords": ["鴻海", "2317", "Foxconn"]},
    "2454.TW": {"name": "聯發科", "keywords": ["聯發科", "2454", "MediaTek"]},
    "2308.TW": {"name": "台達電", "keywords": ["台達電", "2308", "Delta"]},
    "0050.TW": {"name": "元大台灣50", "keywords": ["台灣50", "0050", "台灣五十"]},
    "0056.TW": {"name": "元大高股息", "keywords": ["高股息", "0056"]},
    "00878.TW": {"name": "國泰永續高股息", "keywords": ["00878", "國泰永續"]},
    "^TWII": {"name": "台股指數", "keywords": ["台股指數", "加權指數", "^TWII"]},
    "BTC-USD": {"name": "比特幣", "keywords": ["比特幣", "BTC", "bitcoin", "BTC-USDT"]},
    "ETH-USD": {"name": "以太坊", "keywords": ["以太坊", "ETH", "ethereum", "ETH-USDT"]},
    "SOL-USD": {"name": "Solana", "keywords": ["Solana", "SOL", "SOL-USDT"]},
}

# 建立資產類別映射
CATEGORY_MAP = {
    "美股 (US) - 個股/ETF/指數": [c for c in FULL_SYMBOLS_MAP.keys() if not (c.endswith(".TW") or c.endswith("-USD") or c.startswith("^TWII"))],
    "台股 (TW) - 個股/ETF/指數": [c for c in FULL_SYMBOLS_MAP.keys() if c.endswith(".TW") or c.startswith("^TWII")],
    "加密貨幣 (Crypto)": [c for c in FULL_SYMBOLS_MAP.keys() if c.endswith("-USD")],
}

CATEGORY_HOT_OPTIONS = {
    category: {f"{code} - {FULL_SYMBOLS_MAP.get(code, {}).get('name', code)}": code for code in sorted(codes)}
    for category, codes in CATEGORY_MAP.items()
}

# 分析週期 (PERIOD_MAP)
PERIOD_MAP = {
    '30 分': ('60d', '30m'),
    '4 小時': ('1y', '60m'),
    '1 日': ('5y', '1d'),
    '1 週': ('max', '1wk')
}

# --- 2. 核心功能函式 (後端邏輯) ---

def get_symbol_from_query(query: str) -> str:
    query = query.strip()
    query_upper = query.upper()
    for code, data in FULL_SYMBOLS_MAP.items():
        if query_upper == code or query == data["name"] or any(query_upper == kw.upper() for kw in data["keywords"]):
            return code
    if re.fullmatch(r'\d{4,6}', query):
        tw_code = f"{query}.TW"
        if tw_code in FULL_SYMBOLS_MAP: return tw_code
        return tw_code
    return query_upper

@st.cache_data(ttl=600)
def get_data(symbol, period, interval):
    try:
        df = yf.Ticker(symbol).history(period=period, interval=interval)
        if df.empty: return None
        df.columns = [col.capitalize() for col in df.columns]
        df = df[~df.index.duplicated(keep='first')]
        df = df.iloc[:-1] 
        return df[['Open', 'High', 'Low', 'Close', 'Volume']]
    except Exception: return None

@st.cache_data
def calculate_indicators(df):
    # 移動平均線
    df['EMA_10'] = ta.trend.ema_indicator(df['Close'], window=10)
    df['EMA_50'] = ta.trend.ema_indicator(df['Close'], window=50)
    df['EMA_200'] = ta.trend.ema_indicator(df['Close'], window=200)
    df['SMA_20'] = ta.trend.sma_indicator(df['Close'], window=20)
    # MACD
    macd = ta.trend.MACD(df['Close'], window_fast=8, window_slow=17, window_sign=9)
    df['MACD_Line'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    df['MACD_Hist'] = macd.macd_diff()
    # 動能
    df['RSI_9'] = ta.momentum.rsi(df['Close'], window=9)
    stoch = ta.momentum.StochasticOscillator(df['High'], df['Low'], df['Close'], window=14, smooth_window=3)
    df['Stoch_%K'] = stoch.stoch()
    df['Williams_%R'] = ta.momentum.williams_r(df['High'], df['Low'], df['Close'], lbp=14)
    # 趨勢強度
    df['ADX_9'] = ta.trend.adx(df['High'], df['Low'], df['Close'], window=9)
    # 波動率
    df['ATR_9'] = ta.volatility.average_true_range(df['High'], df['Low'], df['Close'], window=9)
    bb = ta.volatility.BollingerBands(df['Close'], window=20, window_dev=2)
    df['BB_High'] = bb.bollinger_hband()
    df['BB_Low'] = bb.bollinger_lband()
    # 成交量
    df['OBV'] = ta.volume.on_balance_volume(df['Close'], df['Volume'])
    df['OBV_EMA'] = ta.trend.ema_indicator(df['OBV'], window=20)
    df['MFI'] = ta.volume.money_flow_index(df['High'], df['Low'], df['Close'], df['Volume'], window=14)
    df['CMF'] = ta.volume.chaikin_money_flow(df['High'], df['Low'], df['Close'], df['Volume'], window=20)
    df['VWAP'] = ta.volume.volume_weighted_average_price(df['High'], df['Low'], df['Close'], df['Volume'])
    # 一目均衡表
    ichimoku = ta.trend.IchimokuIndicator(df['High'], df['Low'])
    df['Ichimoku_A'] = ichimoku.ichimoku_a()
    df['Ichimoku_B'] = ichimoku.ichimoku_b()
    # Supertrend
    st = ta.trend.supertrend(df['High'], df['Low'], df['Close'], length=10, multiplier=3.0)
    if not st.empty: df['Supertrend'] = st.iloc[:, 0]
    # Parabolic SAR
    df['SAR'] = ta.trend.psar(df['High'], df['Low'], df['Close'])
    # Keltner Channel
    kc = ta.volatility.KeltnerChannel(df['High'], df['Low'], df['Close'], window=20, window_atr=10)
    df['KC_High'] = kc.keltner_channel_hband()
    df['KC_Low'] = kc.keltner_channel_lband()
    
    df.dropna(inplace=True)
    return df

@st.cache_data(ttl=3600)
def get_fundamental_data(symbol):
    try:
        if any(keyword in symbol for keyword in ['-USD', '^']): return {'info': {}}
        ticker = yf.Ticker(symbol)
        return {'info': ticker.info}
    except: return {'info': {}}
    
@st.cache_data(ttl=3600)
def get_company_info(symbol):
    info = FULL_SYMBOLS_MAP.get(symbol, {})
    if info:
        if symbol.endswith(".TW") or symbol.startswith("^TWII"): category, currency = "台股 (TW)", "TWD"
        elif symbol.endswith("-USD"): category, currency = "加密貨幣 (Crypto)", "USD"
        else: category, currency = "美股 (US)", "USD"
        return {"name": info['name'], "category": category, "currency": currency}
    
    try:
        ticker = yf.Ticker(symbol)
        yf_info = ticker.info
        name = yf_info.get('longName') or yf_info.get('shortName') or symbol
        currency = yf_info.get('currency') or "USD"
        category = "未分類"
        if symbol.endswith(".TW"): category = "台股 (TW)"
        elif symbol.endswith("-USD"): category = "加密貨幣 (Crypto)"
        elif symbol.startswith("^"): category = "指數"
        elif currency == "USD": category = "美股 (US)"
        return {"name": name, "category": category, "currency": currency}
    except:
        return {"name": symbol, "category": "未分類", "currency": "USD"}

def calculate_fundamental_scores(info):
    roe = info.get('returnOnEquity', 0) or 0
    pe = info.get('trailingPE', 99) or 99
    fcf = info.get('freeCashflow', 0) or 0
    cash = info.get('totalCash', 0) or 0
    debt = info.get('totalDebt', 1) or 1
    
    roe_s = 3 if roe > 0.15 else (2 if roe > 0.10 else (1 if roe > 0 else 0))
    pe_s = 3 if 0 < pe < 15 else (2 if 0 < pe < 25 else (1 if 0 < pe < 35 else 0))
    cf_s = 3 if fcf > 0 and cash > debt else (2 if fcf > 0 or cash > debt else (1 if cash > debt * 0.5 else 0))
    
    score = roe_s + pe_s + cf_s
    msg = f"頂級優異 (強護城河), ROE > 15%" if score >= 7 else ("良好穩健" if score >= 5 else ("中性警示" if score >= 3 else "基本面較弱"))
    return {'display_score': score, 'message': msg}

def generate_ai_fusion_signal(df, funda_scores, inst_hold_pct):
    latest, prev = df.iloc[-1], df.iloc[-2]
    opinions = {}
    
    ema_10, ema_50, ema_200 = latest['EMA_10'], latest['EMA_50'], latest['EMA_200']
    if ema_10 > ema_50 and ema_50 > ema_200: ma_score, opinions['趨勢分析 (MA 排列)'] = 2.0, "強勢多頭排列: **10 > 50 > 200**"
    elif ema_10 < ema_50 and ema_50 < ema_200: ma_score, opinions['趨勢分析 (MA 排列)'] = -2.0, "強勢空頭排列: **10 < 50 < 200**"
    elif ema_10 > ema_50 and prev['EMA_10'] <= prev['EMA_50']: ma_score, opinions['趨勢分析 (MA 排列)'] = 3.5, "**🚀 黃金交叉**"
    elif ema_10 < ema_50 and prev['EMA_10'] >= prev['EMA_50']: ma_score, opinions['趨勢分析 (MA 排列)'] = -3.5, "**💀 死亡交叉**"
    else: ma_score, opinions['趨勢分析 (MA 排列)'] = 0, "中性盤整"

    rsi = latest['RSI_9']
    if rsi < 30: momentum_score, opinions['動能分析 (RSI 9)'] = 2.0, f"強化: RSI {rsi:.1f} < 30, 進入超賣區"
    elif rsi > 70: momentum_score, opinions['動能分析 (RSI 9)'] = -2.0, f"警告: RSI {rsi:.1f} > 70, 進入超買區"
    else: momentum_score, opinions['動能分析 (RSI 9)'] = 0, f"中性: RSI {rsi:.1f}"

    macd = latest['MACD_Hist']
    if macd > 0 and macd > prev['MACD_Hist']: strength_score, opinions['趨勢強度 (MACD)'] = 1.5, "多頭動能增強"
    elif macd < 0 and macd < prev['MACD_Hist']: strength_score, opinions['趨勢強度 (MACD)'] = -1.5, "空頭動能增強"
    else: strength_score, opinions['趨勢強度 (MACD)'] = 0, "動能盤整"
    if latest['ADX_9'] > 25: strength_score *= 1.5; opinions['趨勢強度 (ADX 9)'] = f"確認強趨勢: ADX {latest['ADX_9']:.1f} > 25"
    else: opinions['趨勢強度 (ADX 9)'] = f"盤整: ADX {latest['ADX_9']:.1f} < 25"

    if latest['CMF'] > 0: opinions['資金流分析 (CMF)'] = "資金流入"
    else: opinions['資金流分析 (CMF)'] = "資金流出"

    stoch_k = latest['Stoch_%K']
    if stoch_k < 20: opinions['擺盪指標 (Stochastic)'] = f"強化: 隨機指標超賣 ({stoch_k:.1f} < 20)"
    elif stoch_k > 80: opinions['擺盪指標 (Stochastic)'] = f"警告: 隨機指標超買 ({stoch_k:.1f} > 80)"
    else: opinions['擺盪指標 (Stochastic)'] = f"中性 ({stoch_k:.1f})"
        
    if inst_hold_pct:
        if inst_hold_pct > 0.5: opinions['籌碼面分析 (機構持股)'] = f"法人高度認同 ({inst_hold_pct:.1%})"
        else: opinions['籌碼面分析 (機構持股)'] = f"法人籌碼中性 ({inst_hold_pct:.1%})"
    
    fa_score = funda_scores['display_score']
    opinions['基本面診斷'] = f"{funda_scores['message']}"

    fa_norm = ((fa_score / 9) * 6) - 3 if fa_score > 0 else 0
    total_score = ma_score + momentum_score + strength_score + fa_norm
    
    action = "觀望 (Neutral)"
    if total_score >= 4.0: action = "買進 (Buy)"
    elif total_score >= 1.0: action = "中性偏買 (Hold/Buy)"
    elif total_score <= -4.0: action = "賣出 (Sell/Short)"
    elif total_score <= -1.0: action = "中性偏賣 (Hold/Sell)"
    
    confidence = min(100, int(50 + (total_score / 10) * 50))
    return {'total_score': total_score, 'action': action, 'confidence': confidence, 'opinions': opinions}

def calculate_risk_management(df):
    latest = df.iloc[-1]
    atr = latest['ATR_9']
    entry = latest['Close']
    return {'sl': entry - 2 * atr, 'tp': entry + 4 * atr, 'entry': entry, 'atr': atr}

def run_backtest(df, initial_capital=100000):
    if df.empty or 'SMA_20' not in df.columns or 'EMA_50' not in df.columns:
        return {}
    
    df['signal'] = 0
    df.loc[(df['SMA_20'] > df['EMA_50']) & (df['SMA_20'].shift(1) <= df['EMA_50'].shift(1)), 'signal'] = 1
    df.loc[(df['SMA_20'] < df['EMA_50']) & (df['SMA_20'].shift(1) >= df['EMA_50'].shift(1)), 'signal'] = -1

    cash = initial_capital
    position_size = 0
    entry_price = 0
    trades = []
    equity_curve_values = []

    for i in range(len(df)):
        if df['signal'].iloc[i] == 1 and position_size == 0:
            position_size = cash / df['Close'].iloc[i]
            entry_price = df['Close'].iloc[i]
            cash = 0
        elif df['signal'].iloc[i] == -1 and position_size > 0:
            cash = position_size * df['Close'].iloc[i]
            profit = cash - (position_size * entry_price)
            trades.append(profit)
            position_size = 0

        current_equity = cash + (position_size * df['Close'].iloc[i])
        equity_curve_values.append(current_equity)

    if position_size > 0:
        final_cash = position_size * df['Close'].iloc[-1]
        profit = final_cash - (position_size * entry_price)
        trades.append(profit)

    if not trades:
        return {"total_return": 0, "win_rate": 0, "max_drawdown": 0, "total_trades": 0, "equity_curve": pd.Series([initial_capital]*len(df), index=df.index)}

    equity_curve = pd.Series(equity_curve_values, index=df.index)
    
    total_return = (equity_curve.iloc[-1] / initial_capital - 1) * 100
    win_rate = (len([t for t in trades if t > 0]) / len(trades)) * 100 if trades else 0
    
    roll_max = equity_curve.cummax()
    daily_drawdown = equity_curve / roll_max - 1.0
    max_drawdown = abs(daily_drawdown.min() * 100)
    
    message = f"回測區間 {df.index[0].strftime('%Y-%m-%d')} ~ {df.index[-1].strftime('%Y-%m-%d')}"

    return {
        "total_return": total_return,
        "win_rate": win_rate,
        "max_drawdown": max_drawdown,
        "total_trades": len(trades),
        "equity_curve": equity_curve,
        "message": message
    }

def get_technical_data_df(df, total_score):
    if df.empty: return pd.DataFrame()
    latest = df.iloc[-1]
    data = []
    
    score_text = f"(總分: {total_score:.2f})"

    ema_10, ema_50, ema_200 = latest['EMA_10'], latest['EMA_50'], latest['EMA_200']
    if ema_10 > ema_50 and ema_50 > ema_200: conclusion_ma, color_ma = f"**強多頭：MA 多頭排列** {score_text}", "positive"
    else: conclusion_ma, color_ma = f"中性：MA 糾結或趨勢發展中 {score_text}", "neutral"
    data.append(['價格 vs. EMA 10/50/200', f"{latest['Close']:,.2f}", conclusion_ma, color_ma])
    
    rsi = latest['RSI_9']
    if rsi > 70: conclusion_rsi, color_rsi = f"警告：超買區域 ({rsi:.1f}) {score_text}", "negative"
    elif rsi < 30: conclusion_rsi, color_rsi = f"強化：超賣區域 ({rsi:.1f}) {score_text}", "positive"
    else: conclusion_rsi, color_rsi = f"中性 {score_text}", "neutral"
    data.append(['RSI (9) 動能', f"{rsi:.2f}", conclusion_rsi, color_rsi])

    adx = latest['ADX_9']
    if adx > 25: conclusion_adx, color_adx = f"強趨勢 ({adx:.1f}) {score_text}", "positive"
    else: conclusion_adx, color_adx = f"盤整 {score_text}", "neutral"
    data.append(['ADX (9) 趨勢強度', f"{adx:.2f}", conclusion_adx, color_adx])

    cmf = latest['CMF']
    cmf_conclusion, cmf_color = (f"資金流入 ({cmf:.2f}) {score_text}", "positive") if cmf > 0 else (f"資金流出 ({cmf:.2f}) {score_text}", "negative")
    data.append(['柴金資金流 (CMF)', f"{cmf:.2f}", cmf_conclusion, cmf_color])
    
    stoch_k = latest['Stoch_%K']
    if stoch_k > 80: conclusion_stoch, color_stoch = f"超買 ({stoch_k:.1f}) {score_text}", "negative"
    elif stoch_k < 20: conclusion_stoch, color_stoch = f"超賣 ({stoch_k:.1f}) {score_text}", "positive"
    else: conclusion_stoch, color_stoch = f"中性 ({stoch_k:.1f}) {score_text}", "neutral"
    data.append(['隨機指標 %K (14,3)', f"{stoch_k:.2f}", conclusion_stoch, color_stoch])

    ichimoku_a, ichimoku_b, close = latest['Ichimoku_A'], latest['Ichimoku_B'], latest['Close']
    if close > ichimoku_a and close > ichimoku_b: ichi_conclusion, ichi_color = f"突破雲區 {score_text}", "positive"
    elif close < ichimoku_a and close < ichimoku_b: ichi_conclusion, ichi_color = f"跌破雲區 {score_text}", "negative"
    else: ichi_conclusion, ichi_color = f"雲區盤整 {score_text}", "neutral"
    data.append(['一目均衡表 (雲區)', f"{close:,.2f}", ichi_conclusion, ichi_color])
    
    return pd.DataFrame(data, columns=['指標名稱', '最新值', '分析結論', '顏色']).set_index('指標名稱')

def create_multi_indicator_chart(df, symbol, period):
    fig = make_subplots(
        rows=4, cols=1, shared_xaxes=True, 
        vertical_spacing=0.04, 
        row_heights=[0.5, 0.15, 0.15, 0.2],
        subplot_titles=(f"{symbol} 價格走勢 (週期: {period})", "MACD 指標", "擺盪指標 (RSI / Stochastic)", "量能指標 (OBV / CMF)"),
        specs=[[{"secondary_y": True}], [{"secondary_y": False}], [{"secondary_y": False}], [{"secondary_y": True}]]
    )
    
    fig.add_trace(go.Candlestick(x=df.index, open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], name='K線', increasing_line_color='#dc3545', decreasing_line_color='#28a745'), row=1, col=1)
    fig.add_trace(go.Bar(x=df.index, y=df['Volume'], name='成交量', marker_color='grey', opacity=0.3), row=1, col=1, secondary_y=True)
    fig.add_trace(go.Scatter(x=df.index, y=df['EMA_10'], name='EMA 10', line=dict(color='orange', width=1)), row=1, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['EMA_50'], name='EMA 50', line=dict(color='blue', width=1.5)), row=1, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['EMA_200'], name='EMA 200', line=dict(color='purple', width=2, dash='dash')), row=1, col=1)
    colors = np.where(df['MACD_Hist'] > 0, '#dc3545', '#28a745')
    fig.add_trace(go.Bar(x=df.index, y=df['MACD_Hist'], name='MACD Hist', marker_color=colors), row=2, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['MACD_Line'], name='DIF', line=dict(color='cyan', width=1)), row=2, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['MACD_Signal'], name='DEA', line=dict(color='yellow', width=1)), row=2, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['RSI_9'], name='RSI', line=dict(color='purple')), row=3, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['Stoch_%K'], name='Stoch %K', line=dict(color='lightblue', dash='dot')), row=3, col=1)
    fig.add_hline(y=70, line_dash="dash", line_color="red", row=3, col=1)
    fig.add_hline(y=30, line_dash="dash", line_color="green", row=3, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['OBV'], name='OBV', line=dict(color='white')), row=4, col=1)
    fig.add_trace(go.Bar(x=df.index, y=df['CMF'], name='CMF', marker_color=np.where(df['CMF'] > 0, '#dc3545', '#28a745')), row=4, col=1, secondary_y=True)

    fig.update_layout(height=900, xaxis_rangeslider_visible=False, template="plotly_dark", legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))
    fig.update_yaxes(showticklabels=False, row=1, col=1, secondary_y=True)
    fig.update_yaxes(range=[-1, 1], row=4, col=1, secondary_y=True, showgrid=False)
    
    return fig

def update_search_input():
    if st.session_state.symbol_select_box and st.session_state.symbol_select_box != "請選擇標的...":
        code = st.session_state.symbol_select_box.split(' - ')[0]
        st.session_state.sidebar_search_input = code
        if st.session_state.get('last_search_symbol') != code:
            st.session_state.last_search_symbol = code
            st.session_state.analyze_trigger = True
            
# --- 3. Streamlit 主邏輯 (Main Function) ---

def main():
    
    # (UPDATED v8.1) 將標題移至歡迎頁面邏輯之外
    if 'analysis_results' not in st.session_state or st.session_state['analysis_results'] is None:

    st.sidebar.header("分析設定")
    st.sidebar.markdown("---")
    st.sidebar.subheader("1. 選擇資產類別")
    selected_category_key = st.sidebar.selectbox("選擇資產類別", list(CATEGORY_MAP.keys()), index=1, label_visibility="collapsed")
    
    current_category_options_display = list(CATEGORY_HOT_OPTIONS.get(selected_category_key, {}).keys())
    
    current_symbol_code = st.session_state.get('last_search_symbol', "2330.TW")
    default_symbol_index = 0
    
    try:
        current_display_name = f"{current_symbol_code} - {FULL_SYMBOLS_MAP[current_symbol_code]['name']}"
        if current_display_name in current_category_options_display:
            default_symbol_index = current_category_options_display.index(current_display_name)
    except:
        pass

    st.sidebar.selectbox(f"選擇 {selected_category_key} 標的", current_category_options_display, index=default_symbol_index, key="symbol_select_box", on_change=update_search_input, label_visibility="collapsed")

    st.sidebar.markdown("---")
    st.sidebar.markdown("2. 🔍 **輸入股票代碼或中文名稱**")
    text_input_current_value = st.session_state.get('sidebar_search_input', st.session_state.get('last_search_symbol', "2330.TW"))
    selected_query = st.sidebar.text_input("輸入股票代碼或中文名稱", placeholder="例如：AAPL, 台積電, 廣達, BTC-USD", value=text_input_current_value, key="sidebar_search_input", label_visibility="collapsed")

    final_symbol_to_analyze = get_symbol_from_query(selected_query)

    is_symbol_changed = final_symbol_to_analyze != st.session_state.get('last_search_symbol', "INIT")

    if is_symbol_changed:
        if final_symbol_to_analyze and final_symbol_to_analyze != "---": 
            st.session_state['analyze_trigger'] = True
            st.session_state['last_search_symbol'] = final_symbol_to_analyze
            st.session_state['data_ready'] = False

    st.sidebar.markdown("---")
    st.sidebar.subheader("3. **選擇週期**")
    period_keys = list(PERIOD_MAP.keys())
    selected_period_key = st.sidebar.selectbox("分析時間週期", period_keys, index=period_keys.index("1 日")) 
    yf_period, yf_interval = PERIOD_MAP[selected_period_key]
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("4. **開始分析**")
    analyze_button_clicked = st.sidebar.button("📊 執行AI分析", key="main_analyze_button") 

    # --- 主畫面顯示 ---
    if 'analysis_results' not in st.session_state:
        st.session_state['analysis_results'] = None

    if analyze_button_clicked or st.session_state.get('analyze_trigger', False):
        st.session_state['analyze_trigger'] = False 
        
        with st.spinner(f'AI 分析引擎啟動中...'):
            data = get_data(final_symbol_to_analyze, yf_period, yf_interval)
            if data is not None and len(data) > 50:
                df = calculate_indicators(data.copy())
                if not df.empty:
                    funda = get_fundamental_data(final_symbol_to_analyze)
                    st.session_state['analysis_results'] = {
                        'df': df,
                        'funda_scores': calculate_fundamental_scores(funda['info']),
                        'inst_hold_pct': funda['info'].get('heldPercentInstitutions'),
                        'final_symbol': final_symbol_to_analyze,
                        'final_symbol_name': get_company_info(final_symbol_to_analyze)['name'],
                        'period_label': selected_period_key,
                    }
                else: st.session_state['analysis_results'] = {'error': '數據不足以計算指標'}
            else: st.session_state['analysis_results'] = {'error': f"數據不足或代碼 '{final_symbol_to_analyze}' 無效"}

    if st.session_state['analysis_results']:
        if 'error' in st.session_state['analysis_results']:
            st.error(st.session_state['analysis_results']['error'])
        else:
            res = st.session_state['analysis_results']
            df, funda_scores, inst_hold_pct, final_symbol, final_symbol_name, period_label = \
            res['df'], res['funda_scores'], res['inst_hold_pct'], res['final_symbol'], res['final_symbol_name'], res['period_label']
            
            signal = generate_ai_fusion_signal(df, funda_scores, inst_hold_pct)
            risk = calculate_risk_management(df)
            backtest = run_backtest(df.copy())
            
            st.title(f"📈 {final_symbol_name} ({final_symbol}) AI趨勢分析")
            
            price_change = risk['entry'] - df['Close'].iloc[-2]
            price_change_pct = (price_change / df['Close'].iloc[-2]) * 100

            action_text = signal['action']
            action_text_class = 'neutral'
            if '買' in action_text: action_text_class = 'positive'
            if '賣' in action_text: action_text_class = 'negative'

            st.subheader(f"分析週期: {period_label} | 基本面診斷: {funda_scores['display_score']}/9 ({funda_scores['message']})")
            st.markdown("---")
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("💰 當前價格", f"{risk['entry']:,.2f}", f"{price_change:+.2f} ({price_change_pct:+.2f}%)")
            with col2:
                st.markdown("**🎯 最終行動建議**")
                st.markdown(f"<p class='{action_text_class}' style='font-size: 20px;'>{signal['action']}</p>", unsafe_allow_html=True)
            col3.metric("🔥 總量化評分", f"{signal['total_score']:.2f}")
            col4.metric("🛡️ 信心指數", f"{signal['confidence']}%")

            st.markdown("---")
            st.markdown("<h3>🧠 關鍵技術指標</h3>", unsafe_allow_html=True)
            ai_df = pd.DataFrame(signal['opinions'].items(), columns=['AI領域', '判斷結果'])
            
            def style_expert_opinion(s):
                is_positive = s.str.contains('買|多頭|強化|反彈|黃金交叉|強勢|流入|認同|上升', case=False)
                is_negative = s.str.contains('賣|空頭|削弱|回調|死亡交叉|過熱|流出|下降', case=False)
                colors = np.select([is_negative, is_positive], ['color: #28a745;', 'color: #dc3545;'], default='color: #FA8072;')
                return [f'{c} font-weight: bold;' for c in colors]
            
            styled_ai_df = ai_df.style.apply(style_expert_opinion, subset=['判斷結果'], axis=0)
            st.dataframe(styled_ai_df, use_container_width=True)

            st.markdown("---")
            st.markdown("<h3>🧪 策略回測報告</h3>", unsafe_allow_html=True)
            if backtest and backtest.get("total_trades", 0) > 0:
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("📊 總回報率", f"{backtest['total_return']:.2f}%")
                col2.metric("📈 勝率", f"{backtest['win_rate']:.2f}%")
                col3.metric("📉 最大回撤 (MDD)", f"{abs(backtest['max_drawdown']):.2f}%", delta_color='inverse')
                col4.metric("🤝 交易總次數", f"{backtest['total_trades']}")
                
                fig_bt = go.Figure()
                fig_bt.add_trace(go.Scatter(x=backtest['equity_curve'].index, y=backtest['equity_curve'], name='策略資金曲線', line=dict(color='#FA8072', width=2)))
                fig_bt.update_layout(title='SMA 20/EMA 50 交叉策略資金曲線', template='plotly_dark', height=300, margin=dict(l=20, r=20, t=40, b=20))
                st.plotly_chart(fig_bt, use_container_width=True)
            else:
                st.info("此區間無交易信號，或數據不足以進行回測。")

            st.markdown("<h3>📊 完整技術分析圖表</h3>", unsafe_allow_html=True)
            fig_professional = create_multi_indicator_chart(df, final_symbol, period_label)
            st.plotly_chart(fig_professional, use_container_width=True)

    else:
        st.markdown(
              """
              <h1 style='color: #FA8072; font-size: 32px; font-weight: bold;'>🚀 歡迎使用 AI 趨勢分析</h1>
              """, 
              unsafe_allow_html=True
          )
        st.markdown(f"請在左側選擇或輸入您想分析的標的（例如：**2330.TW**、**NVDA**、**BTC-USD**），然後點擊 <span style='color: #FA8072; font-weight: bold;'>『📊 執行AI分析』</span> 按鈕開始。", unsafe_allow_html=True)
        st.markdown("---")
        st.subheader("📝 使用步驟：")
        st.markdown("1. **選擇資產類別**：在左側欄選擇 `美股`、`台股` 或 `加密貨幣`。")
        st.markdown("2. **選擇標的**：使用下拉選單快速選擇熱門標的，或直接在輸入框中鍵入代碼或名稱。")
        st.markdown("3. **選擇週期**：決定分析的長度（例如：`30 分`、`4 小時`、`1 日`、`1 周`）。")
        st.markdown(f"4. **執行分析**：點擊 <span style='color: #FA8072; font-weight: bold;'>『📊 執行AI分析』</span>，AI將融合基本面與技術面指標提供交易策略。", unsafe_allow_html=True)
        st.markdown("---")
        st.markdown("⚠️ **綜合風險與免責聲明 (Risk & Disclaimer)**", unsafe_allow_html=True)
        st.markdown("本AI趨勢分析模型，是基於**量化集成學習 (Ensemble)**的專業架構。其分析結果**僅供參考用途**")
        st.markdown("投資涉及風險，所有交易決策應基於您個人的**獨立研究和財務狀況**，並強烈建議諮詢**專業金融顧問**。", unsafe_allow_html=True)
        st.markdown("📊 **數據來源:** Yahoo Finance | 🛠️ **技術指標:** TA 庫 | 💻 **APP優化:** AI")


if __name__ == '__main__':
    # 初始化 session state
    if 'last_search_symbol' not in st.session_state:
        st.session_state['last_search_symbol'] = "2330.TW"
    if 'data_ready' not in st.session_state:
        st.session_state['data_ready'] = False
    if 'sidebar_search_input' not in st.session_state:
        st.session_state['sidebar_search_input'] = "2330.TW"
    if 'analyze_trigger' not in st.session_state:
        st.session_state['analyze_trigger'] = False
        
    main()


