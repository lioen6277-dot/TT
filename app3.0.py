# -*- coding: utf-8 -*-
"""
AI 趨勢分析 Streamlit 應用程式
專家增強最終版實作 (V6.0 - UI Logic Fusion)

本應用程式根據一份詳細的金融分析工具設定文件進行開發，並融合了專業級的
app2.0.py 設計邏輯與使用者提供的 UI 視覺設計稿，旨在提供一個外觀精美、
互動專業的決策儀表板。

核心功能：
- [升級] 融合原生 st.metric 與客製化 HTML，達到最佳視覺與互動效果
- [升級] 採用 DataFrame Styler 渲染具備條件格式化的 AI 判讀與技術指標表格
- [新增] 專業級「技術指標狀態表」模組，提供深度交叉驗證
- [修復/升級] 完整實作並升級為 Mark-to-Market 視覺化策略回測報告
- [升級] 根據最終設計圖，將圖表升級為包含完整 MACD 指標的專業版本
- 擴充資產庫與智慧搜尋
- 精煉版技術指標計算引擎 (TA-Lib)
- AI 融合信號生成模型

開發者：程式碼專家 (Generated by Gemini)
版本：6.0.0 (UI Logic Fusion)
"""

# 載入核心套件
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import ta
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re

# --- 1. 應用程式全域設定與靜態資料 ---

# 設置頁面配置
st.set_page_config(
    page_title="🚀 AI 趨勢分析專家系統",
    page_icon="📈",
    layout="wide"
)

# (UPDATED v5.0) 全局 CSS 樣式，實現像素級復刻
st.markdown("""
<style>
    /* 全局暗色主題 */
    body, .stApp {
        background-color: #0E1117;
        color: #FAFAFA;
    }
    /* 側邊欄樣式 */
    [data-testid="stSidebar"] {
        background-color: #161A25;
        border-right: 1px solid #333;
    }
    /* 主要內容區塊 */
    .main .block-container {
        padding-top: 2rem;
    }
    /* 標題樣式 */
    h1, h2, h3 {
        color: #E0E0E0; 
        font-weight: 600;
    }
    /* st.metric樣式覆蓋 */
    [data-testid="stMetricValue"] { font-size: 20px; }
    [data-testid="stMetricLabel"] { font-size: 13px; }
    [data-testid="stMetricDelta"] { font-size: 12px; }
    
    /* 自訂行動建議文字顏色 */
    .action-buy { color: #dc3545; font-weight: bold; } /* 紅色 */
    .action-sell { color: #28a745; font-weight: bold; } /* 綠色 */
    .action-neutral { color: #ffc107; font-weight: bold; } /* 黃色 */
    .action-hold-buy { color: #FA8072; font-weight: bold; } /* 淡紅 */
    .action-hold-sell { color: #80B572; font-weight: bold; } /* 淡綠 */

    /* 策略總結資訊框 */
    .strategy-summary {
        background-color: rgba(52, 152, 219, 0.1);
        border-left: 5px solid #3498db;
        padding: 15px;
        border-radius: 8px;
        margin-top: 10px;
        font-size: 0.95em;
    }
</style>
""", unsafe_allow_html=True)


# 擴充後的資產庫
FULL_SYMBOLS_MAP = {
    "TSLA": {"name": "特斯拉", "keywords": ["特斯拉", "電動車", "TSLA", "Tesla"]},
    "NVDA": {"name": "輝達", "keywords": ["輝達", "英偉達", "AI", "NVDA", "Nvidia"]},
    "AAPL": {"name": "蘋果", "keywords": ["蘋果", "Apple", "AAPL"]},
    "GOOGL": {"name": "谷歌/Alphabet", "keywords": ["谷歌", "Alphabet", "GOOGL", "GOOG"]},
    "MSFT": {"name": "微軟", "keywords": ["微軟", "Microsoft", "MSFT"]},
    "SPY": {"name": "SPDR 標普500 ETF", "keywords": ["SPY", "標普ETF"]},
    "^GSPC": {"name": "S&P 500 指數", "keywords": ["標普", "S&P500", "^GSPC", "SPX"]},
    "2330.TW": {"name": "台積電", "keywords": ["台積電", "2330", "TSMC"]},
    "2317.TW": {"name": "鴻海", "keywords": ["鴻海", "2317", "Foxconn"]},
    "2454.TW": {"name": "聯發科", "keywords": ["聯發科", "2454", "MediaTek"]},
    "0050.TW": {"name": "元大台灣50", "keywords": ["台灣50", "0050", "台灣五十"]},
    "^TWII": {"name": "台股指數", "keywords": ["台股指數", "加權指數", "^TWII"]},
    "BTC-USD": {"name": "比特幣", "keywords": ["比特幣", "BTC", "bitcoin", "BTC-USDT"]},
    "ETH-USD": {"name": "以太坊", "keywords": ["以太坊", "ETH", "ethereum", "ETH-USDT"]},
    "SOL-USD": {"name": "Solana", "keywords": ["Solana", "SOL", "SOL-USDT"]},
}

# 建立資產類別映射
CATEGORY_MAP = {
    "美股 (US)": [c for c in FULL_SYMBOLS_MAP.keys() if not (c.endswith(".TW") or c.endswith("-USD") or c.startswith("^TWII"))],
    "台股 (TW)": [c for c in FULL_SYMBOLS_MAP.keys() if c.endswith(".TW") or c.startswith("^TWII")],
    "加密貨幣 (Crypto)": [c for c in FULL_SYMBOLS_MAP.keys() if c.endswith("-USD")],
}

CATEGORY_HOT_OPTIONS = {
    category: {f"{code} ({FULL_SYMBOLS_MAP[code]['name']})": code for code in sorted(codes)}
    for category, codes in CATEGORY_MAP.items()
}

# 分析週期 (PERIOD_MAP)
PERIOD_MAP = {
    '30 分': ('60d', '30m'),
    '4 小時': ('1y', '60m'),
    '1 日': ('5y', '1d'),
    '1 週': ('max', '1wk')
}

# --- 2. 核心功能函式 (後端邏輯) ---

def get_symbol_from_query(query: str) -> str:
    query = query.strip()
    query_upper = query.upper()
    for code, data in FULL_SYMBOLS_MAP.items():
        if query_upper == code or query == data["name"] or any(query_upper == kw.upper() for kw in data["keywords"]):
            return code
    if re.fullmatch(r'\d{4,6}', query):
        return f"{query}.TW"
    return query_upper

@st.cache_data(ttl=600)
def get_data(symbol, period, interval):
    try:
        df = yf.Ticker(symbol).history(period=period, interval=interval)
        if df.empty: return None
        df.columns = [col.capitalize() for col in df.columns]
        return df[['Open', 'High', 'Low', 'Close', 'Volume']]
    except Exception: return None

@st.cache_data
def calculate_indicators(df):
    df['EMA_10'] = ta.trend.ema_indicator(df['Close'], window=10)
    df['EMA_50'] = ta.trend.ema_indicator(df['Close'], window=50)
    df['EMA_200'] = ta.trend.ema_indicator(df['Close'], window=200)
    df['SMA_20'] = ta.trend.sma_indicator(df['Close'], window=20)
    macd = ta.trend.MACD(df['Close'], window_fast=8, window_slow=17, window_sign=9)
    df['MACD_Line'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    df['MACD_Hist'] = macd.macd_diff()
    df['RSI_9'] = ta.momentum.rsi(df['Close'], window=9)
    df['ADX_9'] = ta.trend.adx(df['High'], df['Low'], df['Close'], window=9)
    df['ATR_9'] = ta.volatility.average_true_range(df['High'], df['Low'], df['Close'], window=9)
    bb = ta.volatility.BollingerBands(df['Close'], window=20, window_dev=2)
    df['BB_High'] = bb.bollinger_hband()
    df['BB_Low'] = bb.bollinger_lband()
    df.dropna(inplace=True)
    return df

@st.cache_data(ttl=3600)
def get_fundamental_data(symbol):
    try:
        if any(keyword in symbol for keyword in ['-USD', '^']): return {'info': {}, 'news': []}
        return {'info': yf.Ticker(symbol).info, 'news': yf.Ticker(symbol).news[:5]}
    except: return {'info': {}, 'news': []}

def calculate_fundamental_scores(info):
    roe = info.get('returnOnEquity', 0) or 0
    pe = info.get('trailingPE', 99) or 99
    fcf = info.get('freeCashflow', 0) or 0
    cash = info.get('totalCash', 0) or 0
    debt = info.get('totalDebt', 1) or 1
    
    roe_s = 3 if roe > 0.15 else (2 if roe > 0.10 else (1 if roe > 0 else 0))
    pe_s = 3 if 0 < pe < 15 else (2 if 0 < pe < 25 else (1 if 0 < pe < 35 else 0))
    cf_s = 3 if fcf > 0 and cash > debt else (2 if fcf > 0 or cash > debt else (1 if cash > debt * 0.5 else 0))
    
    score = roe_s + pe_s + cf_s
    msg = f"頂級優異 (強護城河), ROE > 15%" if score >= 7 else ("良好穩健" if score >= 5 else ("中性警示" if score >= 3 else "基本面較弱"))
    return {'display_score': score, 'message': msg}

def generate_ai_fusion_signal(df, fa_score):
    latest, prev = df.iloc[-1], df.iloc[-2]
    opinions = {}
    
    ema_10, ema_50, ema_200 = latest['EMA_10'], latest['EMA_50'], latest['EMA_200']
    if ema_10 > ema_50 and ema_50 > ema_200: ma_score, opinions['趨勢分析 (MA 排列)'] = 2.0, "強勢多頭排列: **10 > 50 > 200**"
    elif ema_10 < ema_50 and ema_50 < ema_200: ma_score, opinions['趨勢分析 (MA 排列)'] = -2.0, "強勢空頭排列: **10 < 50 < 200**"
    elif ema_10 > ema_50 and prev['EMA_10'] <= prev['EMA_50']: ma_score, opinions['趨勢分析 (MA 排列)'] = 3.5, "**🚀 黃金交叉**"
    elif ema_10 < ema_50 and prev['EMA_10'] >= prev['EMA_50']: ma_score, opinions['趨勢分析 (MA 排列)'] = -3.5, "**💀 死亡交叉**"
    else: ma_score, opinions['趨勢分析 (MA 排列)'] = 0, "中性盤整"

    rsi = latest['RSI_9']
    if rsi < 40: momentum_score, opinions['動能分析 (RSI 9)'] = 2.0, f"強化: RSI {rsi:.1f} < 40, 潛在反彈"
    elif rsi > 60: momentum_score, opinions['動能分析 (RSI 9)'] = -2.0, f"警告: RSI {rsi:.1f} > 60, 動能過熱"
    else: momentum_score, opinions['動能分析 (RSI 9)'] = 0, f"中性: RSI {rsi:.1f}"

    macd = latest['MACD_Hist']
    if macd > 0 and macd > prev['MACD_Hist']: strength_score, opinions['趨勢強度 (MACD)'] = 1.5, "多頭動能增強"
    elif macd < 0 and macd < prev['MACD_Hist']: strength_score, opinions['趨勢強度 (MACD)'] = -1.5, "空頭動能增強"
    else: strength_score, opinions['趨勢強度 (MACD)'] = 0, "動能盤整"
    if latest['ADX_9'] > 25: strength_score *= 1.5; opinions['趨勢強度 (ADX 9)'] = f"確認強趨勢: ADX {latest['ADX_9']:.1f} > 25"
    else: opinions['趨勢強度 (ADX 9)'] = f"盤整: ADX {latest['ADX_9']:.1f} < 25"
    
    fa_norm = ((fa_score / 9) * 6) - 3 if fa_score > 0 else 0
    total_score = ma_score + momentum_score + strength_score + fa_norm
    
    action = "觀望 (Neutral)"
    if total_score >= 4.0: action = "買進 (Buy)"
    elif total_score >= 1.0: action = "中性偏買 (Hold/Buy)"
    elif total_score <= -4.0: action = "賣出 (Sell/Short)"
    elif total_score <= -1.0: action = "中性偏賣 (Hold/Sell)"
    
    confidence = min(100, int(50 + (total_score / 10) * 50))
    return {'total_score': total_score, 'action': action, 'confidence': confidence, 'opinions': opinions}

def calculate_risk_management(df):
    latest = df.iloc[-1]
    atr = latest['ATR_9']
    entry = latest['Close']
    return {'sl': entry - 2 * atr, 'tp': entry + 4 * atr, 'entry': entry, 'atr': atr}

def run_backtest(df, initial_capital=100000):
    if df.empty or 'SMA_20' not in df.columns or 'EMA_50' not in df.columns:
        return {}
    
    df['signal'] = 0
    df.loc[(df['SMA_20'] > df['EMA_50']) & (df['SMA_20'].shift(1) <= df['EMA_50'].shift(1)), 'signal'] = 1
    df.loc[(df['SMA_20'] < df['EMA_50']) & (df['SMA_20'].shift(1) >= df['EMA_50'].shift(1)), 'signal'] = -1

    cash = initial_capital
    position_size = 0
    entry_price = 0
    trades = []
    equity_curve_values = []

    for i in range(len(df)):
        if df['signal'].iloc[i] == 1 and position_size == 0:
            position_size = cash / df['Close'].iloc[i]
            entry_price = df['Close'].iloc[i]
            cash = 0
        elif df['signal'].iloc[i] == -1 and position_size > 0:
            cash = position_size * df['Close'].iloc[i]
            profit = cash - (position_size * entry_price)
            trades.append(profit)
            position_size = 0

        current_equity = cash + (position_size * df['Close'].iloc[i])
        equity_curve_values.append(current_equity)

    if position_size > 0:
        final_cash = position_size * df['Close'].iloc[-1]
        profit = final_cash - (position_size * entry_price)
        trades.append(profit)

    if not trades:
        return {"total_return": 0, "win_rate": 0, "max_drawdown": 0, "total_trades": 0, "equity_curve": pd.Series([initial_capital]*len(df), index=df.index), "message": "此區間無交易"}

    equity_curve = pd.Series(equity_curve_values, index=df.index)
    
    total_return = (equity_curve.iloc[-1] / initial_capital - 1) * 100
    win_rate = (len([t for t in trades if t > 0]) / len(trades)) * 100 if trades else 0
    
    roll_max = equity_curve.cummax()
    daily_drawdown = equity_curve / roll_max - 1.0
    max_drawdown = abs(daily_drawdown.min() * 100)
    
    message = f"回測區間 {df.index[0].strftime('%Y-%m-%d')} ~ {df.index[-1].strftime('%Y-%m-%d')}"

    return {
        "total_return": total_return,
        "win_rate": win_rate,
        "max_drawdown": max_drawdown,
        "total_trades": len(trades),
        "equity_curve": equity_curve,
        "message": message
    }

# (NEW v6.0) 獲取技術指標狀態表的函式
def get_technical_data_df(df):
    if df.empty: return pd.DataFrame()
    latest = df.iloc[-1]
    data = []
    
    # 價格 vs EMA
    ema_10, ema_50, ema_200 = latest['EMA_10'], latest['EMA_50'], latest['EMA_200']
    if ema_10 > ema_50 and ema_50 > ema_200: conclusion_ma, color_ma = f"**強多頭：MA 多頭排列**", "red"
    else: conclusion_ma, color_ma = "中性：MA 糾結或趨勢發展中", "blue"
    data.append(['價格 vs. EMA 10/50/200', f"{latest['Close']:,.2f}", conclusion_ma, color_ma])
    
    # RSI
    rsi = latest['RSI_9']
    if rsi > 70: conclusion_rsi, color_rsi = "警告：超買區域 (70)", "green"
    elif rsi < 30: conclusion_rsi, color_rsi = "強化：超賣區域 (30)", "red"
    else: conclusion_rsi, color_rsi = "中性", "blue"
    data.append(['RSI (9) 動能', f"{rsi:.2f}", conclusion_rsi, color_rsi])

    # MACD
    data.append(['MACD (8/17/9) 柱狀圖', f"{latest['MACD_Hist']:.2f}", "中性：動能盤整", "blue"])

    # ADX
    adx = latest['ADX_9']
    if adx > 25: conclusion_adx, color_adx = "強趨勢", "orange"
    else: conclusion_adx, color_adx = "盤整", "blue"
    data.append(['ADX (9) 趨勢強度', f"{adx:.2f}", conclusion_adx, color_adx])

    # ATR
    data.append(['ATR (9) 波動性', f"{latest['ATR_9']:.4f}", "正常波動性", "blue"])
    
    # BBands
    bb_w = (latest['BB_High'] - latest['BB_Low']) / latest['Close'] * 100
    data.append(['布林通道 (BB: 20/2)', f"{latest['Close']:,.2f}", f"中性：在上下軌間 ({bb_w:.2f}% 寬度)", "blue"])

    return pd.DataFrame(data, columns=['指標名稱', '最新值', '分析結論', '顏色']).set_index('指標名稱')

def create_professional_chart(df, symbol, period):
    fig = make_subplots(
        rows=3, cols=1, shared_xaxes=True, 
        vertical_spacing=0.03, 
        row_heights=[0.6, 0.2, 0.2],
        specs=[[{"secondary_y": True}], [{"secondary_y": False}], [{"secondary_y": True}]]
    )
    
    fig.add_trace(go.Candlestick(x=df.index, open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], name='K線', increasing_line_color='#28a745', decreasing_line_color='#dc3545'), row=1, col=1)
    fig.add_trace(go.Bar(x=df.index, y=df['Volume'], name='成交量', marker_color='grey', opacity=0.3), row=1, col=1, secondary_y=True)
    fig.add_trace(go.Scatter(x=df.index, y=df['EMA_10'], name='EMA 10', line=dict(color='orange', width=1)), row=1, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['EMA_50'], name='EMA 50', line=dict(color='blue', width=1.5)), row=1, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['EMA_200'], name='EMA 200', line=dict(color='purple', width=2, dash='dash')), row=1, col=1)
    
    colors = np.where(df['MACD_Hist'] > 0, '#28a745', '#dc3545')
    fig.add_trace(go.Bar(x=df.index, y=df['MACD_Hist'], name='MACD 柱狀圖', marker_color=colors), row=2, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['MACD_Line'], name='DIF', line=dict(color='cyan', width=1)), row=2, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['MACD_Signal'], name='DEA', line=dict(color='yellow', width=1)), row=2, col=1)
    
    fig.add_trace(go.Scatter(x=df.index, y=df['RSI_9'], name='RSI', line=dict(color='purple')), row=3, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['ADX_9'], name='ADX', line=dict(color='brown', dash='dot')), row=3, col=1, secondary_y=True)
    
    fig.update_layout(title_text=f"{symbol} 價格走勢 (週期: {period})", height=800, xaxis_rangeslider_visible=False, template="plotly_dark", legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))
    fig.update_yaxes(title_text="價格", row=1, col=1, secondary_y=False); fig.update_yaxes(showticklabels=False, row=1, col=1, secondary_y=True)
    fig.update_yaxes(title_text="MACD", row=2, col=1)
    fig.update_yaxes(title_text="RSI", range=[0, 100], row=3, col=1); fig.update_yaxes(title_text="ADX", range=[0, 100], row=3, col=1, secondary_y=True, showgrid=False)
    
    fig.add_hline(y=70, line_dash="dash", line_color="red", annotation_text="超買 (70)", row=3, col=1, annotation_position="top right")
    fig.add_hline(y=50, line_dash="dash", line_color="grey", annotation_text="多空分界 (50)", row=3, col=1)
    fig.add_hline(y=30, line_dash="dash", line_color="green", annotation_text="超賣 (30)", row=3, col=1, annotation_position="bottom right")
    return fig

# --- 3. Streamlit 使用者介面 (UI) ---

with st.sidebar:
    st.image("https://storage.googleapis.com/gemini-prod/images/workspace_icon_for_light_background.png", width=60)
    st.header("分析設定")
    st.markdown("---")
    st.subheader("1. 選擇資產類別")
    def on_change_callback(): st.session_state.manual_input = ""
    selected_category = st.selectbox("資產類別", list(CATEGORY_HOT_OPTIONS.keys()), on_change=on_change_callback, key="sb_category", label_visibility="collapsed")
    selected_asset = st.selectbox("熱門標的", list(CATEGORY_HOT_OPTIONS[selected_category].keys()), on_change=on_change_callback, key="sb_asset", label_visibility="collapsed")
    st.markdown("---")
    st.subheader("2. 🔍 輸入股票代碼或中文名稱")
    manual_input = st.text_input("或手動輸入代碼", placeholder="例如: 2330.TW, TSLA", key='manual_input', label_visibility="collapsed")
    query = st.session_state.manual_input.strip() or CATEGORY_HOT_OPTIONS[selected_category][selected_asset]
    final_symbol = get_symbol_from_query(query)
    final_symbol_name = FULL_SYMBOLS_MAP.get(final_symbol, {}).get('name', final_symbol)
    st.info(f"當前目標: **{final_symbol} ({final_symbol_name})**")
    st.markdown("---")
    st.subheader("3. 選擇週期")
    selected_period_label = st.selectbox("分析時間週期", list(PERIOD_MAP.keys()), index=2, label_visibility="collapsed")
    period, interval = PERIOD_MAP[selected_period_label]
    st.markdown("---")
    st.subheader("4. 開始分析")
    start_analysis = st.button("📊 執行AI分析", use_container_width=True)

# --- 主畫面顯示 ---
if 'analysis_results' not in st.session_state:
    st.session_state['analysis_results'] = None

if start_analysis:
    with st.spinner(f'AI 分析引擎啟動中...'):
        data = get_data(final_symbol, period, interval)
        if data is not None and len(data) > 50:
            df = calculate_indicators(data.copy())
            if not df.empty:
                funda = get_fundamental_data(final_symbol)
                st.session_state['analysis_results'] = {
                    'df': df,
                    'funda_scores': calculate_fundamental_scores(funda['info']),
                    'signal': generate_ai_fusion_signal(df, calculate_fundamental_scores(funda['info'])['display_score']),
                    'risk': calculate_risk_management(df),
                    'backtest': run_backtest(df.copy()),
                    'final_symbol': final_symbol,
                    'final_symbol_name': final_symbol_name,
                    'period_label': selected_period_label,
                }
            else: st.session_state['analysis_results'] = {'error': '數據不足以計算指標'}
        else: st.session_state['analysis_results'] = {'error': f"數據不足或代碼 '{final_symbol}' 無效"}

# (UPDATED v6.0) 統一的結果渲染邏輯
if st.session_state['analysis_results']:
    if 'error' in st.session_state['analysis_results']:
        st.error(st.session_state['analysis_results']['error'])
    else:
        # 從 session state 解包所有結果
        res = st.session_state['analysis_results']
        df, funda_scores, signal, risk, backtest, final_symbol, final_symbol_name, period_label = \
        res['df'], res['funda_scores'], res['signal'], res['risk'], res['backtest'], res['final_symbol'], res['final_symbol_name'], res['period_label']
        
        st.title(f"📈 {final_symbol_name} ({final_symbol}) AI趨勢分析")
        
        price_change = risk['entry'] - df['Close'].iloc[-2]
        price_change_pct = (price_change / df['Close'].iloc[-2]) * 100
        price_delta_color = 'inverse' if price_change < 0 else 'normal'

        st.subheader(f"分析週期: {period_label} | 基本面診斷: {funda_scores['display_score']}/9 ({funda_scores['message']})")
        st.markdown("---")
        
        # 核心行動
        st.subheader("💡 核心行動與量化評分")
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("💰 當前價格", f"{risk['entry']:,.2f}", f"{price_change:+.2f} ({price_change_pct:+.2f}%)", delta_color=price_delta_color)
        with col2:
            st.markdown("**🎯 最終行動建議**")
            action_class_map = {"買進 (Buy)": "action-buy", "中性偏買 (Hold/Buy)": "action-hold-buy", "賣出 (Sell/Short)": "action-sell", "中性偏賣 (Hold/Sell)": "action-hold-sell"}
            action_class = action_class_map.get(signal['action'], "action-neutral")
            st.markdown(f"<p class='{action_class}' style='font-size: 20px;'>{signal['action']}</p>", unsafe_allow_html=True)
        col3.metric("🔥 總量化評分", f"{signal['total_score']:.2f}")
        col4.metric("🛡️ 信心指數", f"{signal['confidence']}%")

        # 風險控制
        st.markdown("---")
        st.subheader("🛡️ 精確交易策略與風險控制")
        st.markdown(f"""
        <div class='strategy-summary' style='display:flex; justify-content: space-around; padding: 10px 0;'>
            <span><b>建議操作:</b> {signal['action'].split(" ")[0]}</span>
            <span><b>建議入場價:</b> ~{risk['entry']:,.2f}</span>
            <span><b>🚀 止盈價 (TP):</b> {risk['tp']:,.2f}</span>
            <span><b>🛑 止損價 (SL):</b> {risk['sl']:,.2f}</span>
        </div>
        """, unsafe_allow_html=True)

        # AI 判讀
        st.markdown("---")
        st.subheader("🧠 關鍵技術指標與AI判讀")
        ai_df = pd.DataFrame(signal['opinions'].items(), columns=['AI領域', '判斷結果'])
        ai_df.loc[len(ai_df)] = ['基本面 FCF/ROE/PE 診斷', funda_scores['message']]
        def style_expert_opinion(s):
            is_positive = s.str.contains('買|多頭|強化|反彈|黃金交叉|強勢', case=False)
            is_negative = s.str.contains('賣|空頭|削弱|回調|死亡交叉|過熱', case=False)
            colors = np.select([is_negative, is_positive], ['color: #dc3545;', 'color: #28a745;'], default='color: #ffc107;')
            return [f'{c} font-weight: bold;' for c in colors]
        st.dataframe(ai_df.style.apply(style_expert_opinion, subset=['判斷結果'], axis=0), use_container_width=True)
        st.caption("ℹ️ 紅色=空頭/削弱信號, 綠色=多頭/強化信號, 黃色=中性/警告。")
        
        # 回測報告
        st.markdown("---")
        st.subheader("🧪 策略回測報告 (SMA 20/EMA 50 交叉)")
        if backtest and backtest.get("total_trades", 0) > 0:
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("📊 總回報率", f"{backtest['total_return']:.2f}%", delta=backtest['message'])
            col2.metric("📈 勝率", f"{backtest['win_rate']:.2f}%")
            col3.metric("📉 最大回撤 (MDD)", f"{abs(backtest['max_drawdown']):.2f}%", delta_color='inverse')
            col4.metric("🤝 交易總次數", f"{backtest['total_trades']}")
            
            fig_bt = go.Figure()
            fig_bt.add_trace(go.Scatter(x=backtest['equity_curve'].index, y=backtest['equity_curve'], name='策略資金曲線', line=dict(color='#FA8072', width=2)))
            fig_bt.update_layout(title='SMA 20/EMA 50 交叉策略資金曲線', template="plotly_dark", height=300, margin=dict(l=20, r=20, t=40, b=20))
            st.plotly_chart(fig_bt, use_container_width=True)
        else:
            st.info("此區間無交易信號，或數據不足以進行回測。")

        # 技術指標狀態表
        st.markdown("---")
        st.subheader("🛠️ 技術指標狀態表")
        technical_df = get_technical_data_df(df)
        def style_indicator(s):
            color_map = {'red': 'color: #28a745;', 'green': 'color: #dc3545;', 'orange': 'color: #ffc107;', 'blue': 'color: #E0E0E0;'}
            return [color_map.get(technical_df['顏色'].loc[index], '') for index in s.index]
        st.dataframe(technical_df[['最新值', '分析結論']].style.apply(style_indicator, axis=0), use_container_width=True)

        # 專業版圖表
        st.markdown("---")
        st.subheader("📊 完整技術分析圖表")
        fig_professional = create_professional_chart(df, final_symbol, period_label)
        st.plotly_chart(fig_professional, use_container_width=True)

else:
    # 歡迎頁面
    st.markdown("<h1 style='color: #FA8072;'>🚀 歡迎使用 AI 趨勢分析</h1>", unsafe_allow_html=True)
    st.markdown("請在左側選擇或輸入您想分析的標的，然後點擊 <span style='color: #FA8072; font-weight: bold;'>『📊 執行AI分析』</span> 按鈕開始。", unsafe_allow_html=True)
    st.markdown("---")
    st.subheader("📝 使用步驟：")
    st.markdown("1. **選擇資產類別**\n2. **選擇或輸入標的**\n3. **選擇分析週期**\n4. **點擊執行分析**")
    st.info("⚠️ **免責聲明:** 本分析僅供參考，不構成任何投資建議。")

