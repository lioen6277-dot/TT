# -*- coding: utf-8 -*-
"""
AI 趨勢分析 Streamlit 應用程式
專家增強最終版實作 (V11.0 - Professional MTF Strategy Engine)

本應用程式根據一份詳細的金融分析工具設定文件進行開發，並融合了專業級的
app2.0.py 設計 logique 與使用者提供的 UI 視覺設計稿，旨在提供一個外觀精美、
互動專業的決策儀表板。

核心功能：
- [頂級策略] 引入「多週期趨勢確認」分析引擎，實現分層決策
- [頂級策略] 整合「斐波那契回測」作為動態止盈止損模型
- [策略升級] 更新 MACD 核心參數為 (6, 19, 5)
- [穩定性修復] 修復 UnboundLocalError 並恢復所有儀表板區塊
- [UI 優化] 為 AI 專家總結的行動建議添加顏色標記
- [策略升級] 將 RSI 超買/超賣閾值統一調整為 80/20
- [專家圖表 Pro] 為指標圖表加入關鍵水平線與 AI 註解
- [穩定性強化] 提高數據驗證門檻
- [專家升級] 引入動態適應功能
- [穩定性修復] 增加 SuperTrend 指標計算的 failsafe
- [專家功能] 新增 AI 專家總結模組
- [專家功能] 整合市場狀態過濾機制

開發者：程式碼專家 (Generated by Gemini)
版本：11.0.0 (Professional MTF)
"""

# 載入核心套件
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import ta
import pandas_ta as pta
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re

# --- 1. 應用程式全域設定與靜態資料 ---

st.set_page_config(
    page_title="🚀 AI 趨勢分析專家系統",
    page_icon="📈",
    layout="wide"
)

st.markdown("""
<style>
    body, .stApp { background-color: #0E1117; color: #FAFAFA; }
    [data-testid="stSidebar"] { background-color: #161A25; border-right: 1px solid #333; }
    .main .block-container { padding-top: 2rem; }
    h1, h2, h3, .st-info p { color: #E0E0E0 !important; font-weight: 600; }
    .metric-container { display: flex; justify-content: space-between; gap: 15px; margin-bottom: 20px; }
    .metric-card { background-color: #161A25; border-radius: 8px; padding: 15px; flex-grow: 1; border: 1px solid #333; }
    .metric-label { font-size: 0.9em; color: #A0A0A0; display: flex; align-items: center; gap: 8px; }
    .metric-value { font-size: 1.5em; font-weight: 600; color: #FAFAFA; }
    .metric-delta { font-size: 0.9em; }
    .positive { color: #dc3545; }
    .negative { color: #28a745; }
    .neutral { color: #ffc107; }
    .strategy-summary { background-color: rgba(52, 152, 219, 0.1); border-left: 5px solid #3498db; padding: 15px; border-radius: 8px; margin-top: 10px; font-size: 0.95em; }
    .expert-summary { background-color: rgba(250, 128, 114, 0.1); border-left: 5px solid #FA8072; padding: 15px; border-radius: 8px; margin-bottom: 20px; font-size: 1.05em; }
    .custom-table { width: 100%; border-collapse: collapse; }
    .custom-table th, .custom-table td { padding: 12px 15px; text-align: left; border-bottom: 1px solid #333; }
    .custom-table th { background-color: #161A25; color: #A0A0A0; font-weight: 500; }
    .custom-table td { color: #E0E0E0; }
</style>
""", unsafe_allow_html=True)

FULL_SYMBOLS_MAP = {
    "TSLA": {"name": "特斯拉", "keywords": ["特斯拉", "電動車", "TSLA", "Tesla"]}, "NVDA": {"name": "輝達", "keywords": ["輝達", "英偉達", "AI", "NVDA", "Nvidia"]},
    "AAPL": {"name": "蘋果", "keywords": ["蘋果", "Apple", "AAPL"]}, "GOOGL": {"name": "谷歌/Alphabet", "keywords": ["谷歌", "Alphabet", "GOOGL", "GOOG"]},
    "MSFT": {"name": "微軟", "keywords": ["微軟", "Microsoft", "MSFT"]}, "SPY": {"name": "SPDR 標普500 ETF", "keywords": ["SPY", "標普ETF"]},
    "^GSPC": {"name": "S&P 500 指數", "keywords": ["標普", "S&P500", "^GSPC", "SPX"]}, "2330.TW": {"name": "台積電", "keywords": ["台積電", "2330", "TSMC"]},
    "2317.TW": {"name": "鴻海", "keywords": ["鴻海", "2317", "Foxconn"]}, "2454.TW": {"name": "聯發科", "keywords": ["聯發科", "2454", "MediaTek"]},
    "0050.TW": {"name": "元大台灣50", "keywords": ["台灣50", "0050", "台灣五十"]}, "^TWII": {"name": "台股指數", "keywords": ["台股指數", "加權指數", "^TWII"]},
    "BTC-USD": {"name": "比特幣", "keywords": ["比特幣", "BTC", "bitcoin", "BTC-USDT"]}, "ETH-USD": {"name": "以太坊", "keywords": ["以太坊", "ETH", "ethereum", "ETH-USDT"]},
    "SOL-USD": {"name": "Solana", "keywords": ["Solana", "SOL", "SOL-USDT"]},
}
CATEGORY_MAP = {"美股": [c for c in FULL_SYMBOLS_MAP if not (c.endswith((".TW", "-USD")) or c.startswith("^TWII"))], "台股": [c for c in FULL_SYMBOLS_MAP if c.endswith(".TW") or c.startswith("^TWII")], "加密貨幣": [c for c in FULL_SYMBOLS_MAP if c.endswith("-USD")]}
CATEGORY_HOT_OPTIONS = {cat: {f"{code} - {FULL_SYMBOLS_MAP[code]['name']}": code for code in sorted(codes)} for cat, codes in CATEGORY_MAP.items()}
ANALYSIS_HORIZONS = {
    "短線": {'5 分': ('7d', '5m'), '15 分': ('30d', '15m'), '1 小時': ('60d', '60m')},
    "中線": {'15 分': ('30d', '15m'), '1 小時': ('60d', '60m'), '4 小時': ('1y', '4h')},
    "長線": {'1 小時': ('60d', '60m'), '4 小時': ('1y', '4h'), '日線': ('5y', '1d')}
}
MTF_STRATEGIES = {"短線策略": ('1h', '15m', '5m'), "中線策略": ('4h', '1h', '15m'), "長線策略": ('1d', '4h', '1h')}
MTF_MAP = {'5m': ('7d', '5m'), '15m': ('30d', '15m'), '1h': ('60d', '1h'), '4h': ('1y', '4h'), '1d': ('5y', '1d')}

# --- 2. 核心功能函式 ---

def get_symbol_from_query(query: str) -> str:
    query, query_upper = query.strip(), query.strip().upper()
    for code, data in FULL_SYMBOLS_MAP.items():
        if query_upper == code or query == data["name"] or any(query_upper == kw.upper() for kw in data["keywords"]): return code
    return f"{query}.TW" if re.fullmatch(r'\d{4,6}', query) else query_upper

@st.cache_data(ttl=300)
def get_data(symbol, period, interval):
    try:
        df = yf.Ticker(symbol).history(period=period, interval=interval, auto_adjust=True)
        if df.empty: return None
        df.columns = [col.capitalize() for col in df.columns]
        return df[['Open', 'High', 'Low', 'Close', 'Volume']]
    except Exception: return None

@st.cache_data
def calculate_indicators(df):
    df['EMA_10'], df['EMA_50'], df['SMA_20'] = ta.trend.ema_indicator(df['Close'], 10), ta.trend.ema_indicator(df['Close'], 50), ta.trend.sma_indicator(df['Close'], 20)
    df['MACD_Hist'] = ta.trend.MACD(df['Close'], window_fast=6, window_slow=19, window_sign=5).macd_diff()
    df['RSI_9'] = ta.momentum.rsi(df['Close'], 9)
    df['Stoch_%K'] = ta.momentum.StochasticOscillator(df['High'], df['Low'], df['Close'], 14, 3).stoch()
    df['ADX_9'] = ta.trend.adx(df['High'], df['Low'], df['Close'], 9)
    df['ATR_9'] = ta.volatility.average_true_range(df['High'], df['Low'], df['Close'], 9)
    bb = ta.volatility.BollingerBands(df['Close'], 20, 2); df['BB_High'], df['BB_Low'] = bb.bollinger_hband(), bb.bollinger_lband()
    df['CMF'] = ta.volume.chaikin_money_flow(df['High'], df['Low'], df['Close'], df['Volume'], 20)
    ichimoku = ta.trend.IchimokuIndicator(df['High'], df['Low']); df['Ichimoku_A'], df['Ichimoku_B'] = ichimoku.ichimoku_a(), ichimoku.ichimoku_b()
    df['EMA_200'] = ta.trend.ema_indicator(df['Close'], 200) if len(df) >= 200 else np.nan
    try:
        supertrend = df.ta.supertrend(length=10, multiplier=3)
        if supertrend is not None and 'SUPERT_10_3.0' in supertrend.columns: df['SuperTrend'], df['SuperTrend_Direction'] = supertrend['SUPERT_10_3.0'], supertrend['SUPERTd_10_3.0']
        else: raise ValueError()
    except Exception: df['SuperTrend'], df['SuperTrend_Direction'] = np.nan, 0
    df.dropna(subset=['EMA_50', 'RSI_9'], inplace=True)
    return df

@st.cache_data(ttl=3600)
def get_fundamental_data(symbol):
    try: return {'info': yf.Ticker(symbol).info} if not any(k in symbol for k in ['-USD', '^']) else {'info': {}}
    except Exception: return {'info': {}}

def calculate_fundamental_scores(info):
    roe = info.get('returnOnEquity', 0) or 0; pe = info.get('trailingPE', 99) or 99; fcf = info.get('freeCashflow', 0) or 0
    cash = info.get('totalCash', 0) or 0; debt = info.get('totalDebt', 1) or 1
    roe_s = 3 if roe > 0.15 else (2 if roe > 0.10 else (1 if roe > 0 else 0)); pe_s = 3 if 0 < pe < 15 else (2 if 0 < pe < 25 else (1 if 0 < pe < 35 else 0))
    cf_s = 3 if fcf > 0 and cash > debt else (2 if fcf > 0 or cash > debt else (1 if cash > debt * 0.5 else 0))
    score = roe_s + pe_s + cf_s
    msg = "頂級優異" if score >= 7 else ("良好穩健" if score >= 5 else ("中性警示" if score >= 3 else "基本面較弱"))
    return {'display_score': score, 'message': msg}

def generate_ai_fusion_signal(df, funda_scores, inst_hold_pct):
    latest, prev = df.iloc[-1], df.iloc[-2]; opinions = {}
    ema_10, ema_50, ema_200 = latest['EMA_10'], latest['EMA_50'], latest.get('EMA_200', np.nan)
    if ema_10 > ema_50 and prev['EMA_10'] <= prev['EMA_50']: ma_score, opinions['趨勢分析 (MA)'] = 3.5, "<span class='positive'>**🚀 黃金交叉**</span>"
    elif ema_10 < ema_50 and prev['EMA_10'] >= prev['EMA_50']: ma_score, opinions['趨勢分析 (MA)'] = -3.5, "<span class='negative'>**💀 死亡交叉**</span>"
    elif pd.notna(ema_200):
        if ema_10 > ema_50 > ema_200: ma_score, opinions['趨勢分析 (MA)'] = 2.0, "<span class='positive'>強勢多頭排列</span>"
        elif ema_10 < ema_50 < ema_200: ma_score, opinions['趨勢分析 (MA)'] = -2.0, "<span class='negative'>強勢空頭排列</span>"
        else: ma_score, opinions['趨勢分析 (MA)'] = 0, "<span class='neutral'>中性盤整</span>"
    else:
        ma_score = 1.0 if ema_10 > ema_50 else -1.0; opinions['趨勢分析 (MA)'] = f"<span class='{'positive' if ma_score > 0 else 'negative'}'>短期{'多' if ma_score > 0 else '空'}頭</span> <span class='neutral'>(長線數據不足)</span>"
    rsi = latest['RSI_9']
    if rsi < 20: momentum_score, opinions['動能分析 (RSI 9)'] = 2.0, f"<span class='positive'>超賣 ({rsi:.1f})</span>"
    elif rsi > 80: momentum_score, opinions['動能分析 (RSI 9)'] = -2.0, f"<span class='negative'>超買 ({rsi:.1f})</span>"
    else: momentum_score, opinions['動能分析 (RSI 9)'] = 0, f"<span class='neutral'>中性 ({rsi:.1f})</span>"
    macd = latest['MACD_Hist']
    if macd > 0 and macd > prev['MACD_Hist']: strength_score, opinions['趨勢強度 (MACD)'] = 1.5, "<span class='positive'>多頭動能增強</span>"
    elif macd < 0 and macd < prev['MACD_Hist']: strength_score, opinions['趨勢強度 (MACD)'] = -1.5, "<span class='negative'>空頭動能增強</span>"
    else: strength_score, opinions['趨勢強度 (MACD)'] = 0, "<span class='neutral'>動能盤整</span>"
    adx = latest['ADX_9']
    if adx > 25: strength_score *= 1.5; opinions['趨勢強度 (ADX 9)'] = f"<span class='positive'>強趨勢 ({adx:.1f})</span>"
    else: opinions['趨勢強度 (ADX 9)'] = f"<span class='neutral'>盤整市 ({adx:.1f})</span>"
    fa_norm = (((funda_scores['display_score'] / 9) * 6) - 3) if funda_scores['display_score'] > 0 else 0
    weights = {'momentum': 2.0, 'strength': 2.0, 'ma': 0.5, 'fa': 0.5}
    total_score = (momentum_score*weights['momentum'] + strength_score*weights['strength'] + ma_score*weights['ma'] + fa_norm*weights['fa']) * (0.6 if adx < 20 else 1.0)
    if total_score >= 4.0: action = "買進 (Buy)"
    elif total_score >= 1.0: action = "中性偏買 (Hold/Buy)"
    elif total_score <= -4.0: action = "賣出 (Sell/Short)"
    elif total_score <= -1.0: action = "中性偏賣 (Hold/Sell)"
    else: action = "觀望 (Neutral)"
    return {'total_score': total_score, 'action': action, 'confidence': min(100, int(50 + (total_score / 10) * 50)), 'opinions': opinions}

def calculate_fibonacci_risk_levels(df, action):
    is_buy = "買" in action or "Buy" in action
    lookback = 100
    recent_df = df.tail(lookback)
    swing_high, swing_low = recent_df['High'].max(), recent_df['Low'].min()
    price_range = swing_high - swing_low
    entry = df.iloc[-1]['Close']
    levels = [0, 0.236, 0.382, 0.5, 0.618, 0.786, 1]
    fibo_levels = [swing_high - level * price_range for level in levels]
    if is_buy:
        tp_options, sl_options = [lvl for lvl in fibo_levels if lvl > entry], [lvl for lvl in fibo_levels if lvl < entry]
        tp, sl = (min(tp_options) if tp_options else swing_high * 1.01), (max(sl_options) if sl_options else swing_low * 0.99)
    else:
        tp_options, sl_options = [lvl for lvl in fibo_levels if lvl < entry], [lvl for lvl in fibo_levels if lvl > entry]
        tp, sl = (max(tp_options) if tp_options else swing_low * 0.99), (min(sl_options) if sl_options else swing_high * 1.01)
    return {'sl': sl, 'tp': tp, 'entry': entry, 'atr': df.iloc[-1]['ATR_9']}

def generate_expert_summary(signal, risk, df, name, mtf_summary=None):
    if mtf_summary: return f"<div class='expert-summary'>{mtf_summary}</div>"
    action, opinions = signal['action'], signal['opinions']
    driver = f"RSI ({df.iloc[-1]['RSI_9']:.1f})" if "RSI" in opinions.get('動能分析 (RSI 9)', '') else "趨勢與動能指標"
    if "MACD" in opinions.get('趨勢強度 (MACD)', ''): driver = f"MACD 與 RSI ({df.iloc[-1]['RSI_9']:.1f})"
    condition = "趨勢明確" if df.iloc[-1]['ADX_9'] > 20 else "盤整"
    action_style = 'positive' if '買' in action else ('negative' if '賣' in action else 'neutral')
    colored_action = f"<span class='{action_style}'>{action}</span>"
    if "買" in action: summary = f"📈 「AI 觀點：目前 「{name}」 技術面偏多，由 「{driver}」 帶動。市場「{condition}」，建議 「{colored_action}」。斐波那契支撐 (SL) 約在 「{risk['sl']:.2f}」，壓力 (TP) 約在 「{risk['tp']:.2f}」。」"
    elif "賣" in action: summary = f"📉 「AI 觀點：目前 「{name}」 技術面偏空，由 「{driver}」 帶動。市場「{condition}」，建議 「{colored_action}」。斐波那契壓力 (SL) 約在 「{risk['sl']:.2f}」，支撐 (TP) 約在 「{risk['tp']:.2f}」。」"
    else: summary = f"📊 「AI 觀點：目前 「{name}」 處於中性觀望。市場「{condition}」，建議 「{colored_action}」。關鍵支撐與壓力位於 「{risk['sl']:.2f}」 和 「{risk['tp']:.2f}」。」"
    return f"<div class='expert-summary'>{summary}</div>"

def get_technical_data_df(df):
    if df.empty: return pd.DataFrame()
    latest = df.iloc[-1]; data = []
    if 'EMA_200' in df.columns and pd.notna(latest.get('EMA_200')):
        conclusion = "<span class='positive'>**強多頭**</span>" if latest['EMA_10'] > latest['EMA_50'] > latest['EMA_200'] else "<span class='neutral'>中性</span>"
        data.append(['EMA 10/50/200', f"{latest['Close']:,.2f}", conclusion])
    else: data.append(['EMA 10/50', f"{latest['Close']:,.2f}", f"<span class='{'positive' if latest['EMA_10'] > latest['EMA_50'] else 'negative'}'>短{'多' if latest['EMA_10'] > latest['EMA_50'] else '空'}頭</span>"])
    rsi = latest['RSI_9']; data.append(['RSI (9)', f"{rsi:.2f}", f"<span class='negative'>超買</span>" if rsi > 80 else (f"<span class='positive'>超賣</span>" if rsi < 20 else '中性')])
    adx = latest['ADX_9']; data.append(['ADX (9)', f"{adx:.2f}", f"<span class='positive'>強趨勢</span>" if adx > 25 else '盤整'])
    cmf = latest['CMF']; data.append(['柴金資金流 (CMF)', f"{cmf:.2f}", f"<span class='positive'>資金流入</span>" if cmf > 0 else f"<span class='negative'>資金流出</span>"])
    stoch_k = latest['Stoch_%K']; data.append(['隨機指標 %K (14,3)', f"{stoch_k:.2f}", f"<span class='negative'>超買</span>" if stoch_k > 80 else (f"<span class='positive'>超賣</span>" if stoch_k < 20 else '中性')])
    ichi_a, ichi_b, close = latest['Ichimoku_A'], latest['Ichimoku_B'], latest['Close']
    if close > ichi_a and close > ichi_b: ichi_conclusion = "<span class='positive'>突破雲區</span>"
    elif close < ichi_a and close < ichi_b: ichi_conclusion = "<span class='negative'>跌破雲區</span>"
    else: ichi_conclusion = "<span class='neutral'>雲區盤整</span>"
    data.append(['一目均衡表', f"{close:,.2f}", ichi_conclusion])
    bb_w = (latest['BB_High'] - latest['BB_Low']) / latest['Close'] * 100
    data.append(['布林通道 (20,2)', f"{latest['Close']:,.2f}", f"通道寬度 {bb_w:.2f}%"])
    return pd.DataFrame(data, columns=['指標', '最新值', '分析']).set_index('指標')

def run_multi_timeframe_analysis(symbol, name, strategy):
    tf_long, tf_mid, tf_short = MTF_STRATEGIES[strategy]
    df_long = get_data(symbol, MTF_MAP[tf_long][0], MTF_MAP[tf_long][1])
    df_mid = get_data(symbol, MTF_MAP[tf_mid][0], MTF_MAP[tf_mid][1])
    df_short = get_data(symbol, MTF_MAP[tf_short][0], MTF_MAP[tf_short][1])
    
    if df_long is None or df_mid is None or df_short is None or len(df_long)<55 or len(df_mid)<55 or len(df_short)<55:
        st.error("多週期分析所需數據不足，請確認標的或稍後再試。"); return
        
    df_long, df_mid, df_short = calculate_indicators(df_long.copy()), calculate_indicators(df_mid.copy()), calculate_indicators(df_short.copy())

    trend_long = "Up" if df_long.iloc[-1]['EMA_50'] > df_long.iloc[-1].get('EMA_200', 0) and df_long.iloc[-1]['ADX_9'] > 20 else "Down" if df_long.iloc[-1]['EMA_50'] < df_long.iloc[-1].get('EMA_200', 0) and df_long.iloc[-1]['ADX_9'] > 20 else "Sideways"
    macd_cross_up_mid = df_mid.iloc[-1]['MACD_Hist'] > 0 and df_mid.iloc[-2]['MACD_Hist'] <= 0
    rsi_strong_short = df_short.iloc[-1]['RSI_9'] > 55
    final_action = "觀望 (Neutral)"

    if trend_long == "Up" and macd_cross_up_mid and rsi_strong_short:
        final_action = "買進 (Buy)"
        summary = f"📈 「AI 觀點：基於 **{tf_long}** 週期的主要**上漲趨勢**，AI 觀察到 **{tf_mid}** 週期出現 **MACD 黃金交叉**。同時，**{tf_short}** 圖的 **RSI 強勢**，構成一個多頭共振的進場機會。綜合建議為 「<span class='positive'>{final_action}</span>」。」"
    else:
        summary = f"📊 「AI 觀點：在 {tf_long}/{tf_mid}/{tf_short} 的多週期框架下，未發現明顯的共振交易信號。主要趨勢 ({tf_long}) 為「{trend_long}」，但中短期訊號不一致。建議「<span class='neutral'>{final_action}</span>」。」"
        
    risk = calculate_fibonacci_risk_levels(df_long, final_action)
    summary += f" 斐波那契關鍵支撐 (SL) 約在 「{risk['sl']:.2f}」，壓力 (TP) 約在 「{risk['tp']:.2f}」。」"
    
    st.header(f"📈 {name} ({symbol}) 多週期趨勢確認")
    st.markdown(f"<div class='expert-summary'>{summary}</div>", unsafe_allow_html=True)
    action_style = 'positive' if '買' in final_action else ('negative' if '賣' in final_action else 'neutral'); is_buy = "買" in final_action
    rr = abs((risk['tp'] - risk['entry']) / (risk['entry'] - risk['sl'])) if (risk['entry'] - risk['sl']) != 0 else "N/A"
    st.subheader("🛡️ 斐波那契交易策略與風險控制")
    st.markdown(f"""<div class="metric-container">
        <div class="metric-card"><div class="metric-label">建議操作</div><div class="metric-value"><span class='{action_style}'>{final_action.split(" ")[0]}</span></div></div>
        <div class="metric-card"><div class="metric-label">當前價格 ({tf_short})</div><div class="metric-value" style="color: #FA8072; font-weight: bold;">~{risk['entry']:,.2f}</div></div>
        <div class="metric-card"><div class="metric-label">🚀 斐波那契止盈 (TP)</div><div class="metric-value {'positive' if is_buy else 'negative'}">{risk['tp']:,.2f}</div></div>
        <div class="metric-card"><div class="metric-label">🛑 斐波那契止損 (SL)</div><div class="metric-value {'negative' if is_buy else 'positive'}">{risk['sl']:,.2f}</div></div>
    </div><div class="strategy-summary">💡 <b>策略總結:</b> 基於多週期共振信號，在 <b>~{risk['entry']:,.2f}</b> 範圍尋找機會 | ⚖️ <b>R:R:</b> {rr if isinstance(rr, str) else f'{rr:.2f}'}</div>""", unsafe_allow_html=True)

# --- 3. Streamlit 使用者介面 (UI) ---
with st.sidebar:
    st.subheader("1. 選擇資產類別"); selected_category = st.selectbox("", list(CATEGORY_HOT_OPTIONS.keys()), on_change=lambda: st.session_state.update(manual_input=""), key="sb_category", label_visibility="collapsed")
    st.subheader("2. 選擇或輸入標的"); selected_asset = st.selectbox("", list(CATEGORY_HOT_OPTIONS[selected_category].keys()), on_change=lambda: st.session_state.update(manual_input=""), key="sb_asset", label_visibility="collapsed")
    manual_input = st.text_input("", placeholder="或手動輸入代碼 (例如: 2330.TW)", key='manual_input', label_visibility="collapsed")
    query = st.session_state.manual_input.strip() or CATEGORY_HOT_OPTIONS[selected_category][selected_asset]
    final_symbol, final_symbol_name = get_symbol_from_query(query), FULL_SYMBOLS_MAP.get(get_symbol_from_query(query), {}).get('name', get_symbol_from_query(query))
    st.markdown(f"**當前目標:** `{final_symbol}`"); st.markdown("---")
    st.subheader("3. 選擇分析策略"); analysis_strategy = st.selectbox("", ["單一週期分析", "多週期趨勢確認"], label_visibility="collapsed")
    if analysis_strategy == "單一週期分析":
        st.subheader("4. 選擇分析視野"); selected_horizon = st.selectbox("", list(ANALYSIS_HORIZONS.keys()), index=1, label_visibility="collapsed")
        st.subheader("5. 選擇分析時間週期"); selected_period_label = st.selectbox("", list(ANALYSIS_HORIZONS[selected_horizon].keys()), label_visibility="collapsed")
        period, interval = ANALYSIS_HORIZONS[selected_horizon][selected_period_label]
    else: # Multi-Timeframe
        st.subheader("4. 選擇多週期策略"); selected_mtf_strategy = st.selectbox("", list(MTF_STRATEGIES.keys()), label_visibility="collapsed")
    st.markdown("---"); st.subheader("5. 開始分析"); start_analysis = st.button("📊 執行AI分析", use_container_width=True)

if not start_analysis:
    st.markdown("<h1 style='color: #FA8072; font-size: 32px; font-weight: bold;'>🚀 歡迎使用 AI 趨勢分析</h1>", unsafe_allow_html=True)
    st.markdown("請在左側選擇或輸入您想分析的標的，然後點擊 <span style='color: #FA8072; font-weight: bold;'>『📊 執行AI分析』</span> 按鈕開始。", unsafe_allow_html=True)
    st.markdown("---"); st.subheader("📝 使用步驟：")
    st.markdown("1. **選擇資產**：透過類別或手動輸入。\n"
                "2. **選擇分析策略**: `單一週期分析` 或 `多週期趨勢確認`。\n"
                "3. **選擇分析週期**: 根據您的策略選擇。\n"
                "4. **執行分析**: 點擊 <span style='color: #FA8072; font-weight: bold;'>『📊 執行AI分析』</span>。", unsafe_allow_html=True)
    st.markdown("---"); st.markdown("⚠️ **綜合風險與免責聲明 (Risk & Disclaimer)**")
    st.markdown("本AI分析結果**僅供參考**，不構成任何投資建議。所有交易決策應基於您個人的**獨立研究**，並建議諮詢**專業金融顧問**。", unsafe_allow_html=True)
    st.caption("📊 數據來源: Yahoo Finance | 🛠️ 技術指標: TA 庫 | 💻 APP優化: 專業程式碼專家")
else:
    if analysis_strategy == "多週期趨勢確認":
        run_multi_timeframe_analysis(final_symbol, final_symbol_name, selected_mtf_strategy)
    else:
        with st.spinner(f'AI 分析引擎啟動中，正在分析 {final_symbol_name}...'):
            data = get_data(final_symbol, period, interval)
            if data is not None and len(data) > 55:
                df = calculate_indicators(data.copy())
                if df.empty or len(df) < 2: st.error("錯誤：數據清洗後不足以進行分析，請嘗試更長的分析週期。")
                else:
                    funda = get_fundamental_data(final_symbol); funda_scores = calculate_fundamental_scores(funda.get('info', {}))
                    inst_hold_pct = funda.get('info', {}).get('heldPercentInstitutions')
                    signal = generate_ai_fusion_signal(df, funda_scores, inst_hold_pct)
                    risk = calculate_fibonacci_risk_levels(df, signal['action'])
                    price_change, pct_change = risk['entry'] - df['Close'].iloc[-2], ((risk['entry'] - df['Close'].iloc[-2]) / df['Close'].iloc[-2]) * 100
                    st.header(f"📈 {final_symbol_name} ({final_symbol}) AI趨勢分析")
                    st.markdown(f"**分析週期:** `{selected_period_label}` | **基本面診斷:** `{funda_scores['display_score']}/9 ({funda_scores['message']})`")
                    st.markdown(generate_expert_summary(signal, risk, df, final_symbol_name), unsafe_allow_html=True)
                    action_style = 'positive' if '買' in signal['action'] else ('negative' if '賣' in signal['action'] else 'neutral')
                    st.subheader("💡 核心行動與量化評分")
                    st.markdown(f"""<div class="metric-container">
                        <div class="metric-card"><div class="metric-label">💰 當前價格</div><div class="metric-value">{risk['entry']:,.2f} <span class="metric-delta {'positive' if price_change >= 0 else 'negative'}">{price_change:+.2f} ({pct_change:+.2f}%)</span></div></div>
                        <div class="metric-card"><div class="metric-label">🎯 最終行動建議</div><div class="metric-value"><span class='{action_style}'>{signal['action']}</span></div></div>
                        <div class="metric-card"><div class="metric-label">🔥 總量化評分</div><div class="metric-value"><span class="{'positive' if signal['total_score'] >= 0 else 'negative'}">{signal['total_score']:.2f}</span></div></div>
                        <div class="metric-card"><div class="metric-label">🛡️ 信心指數</div><div class="metric-value"><span class="{'positive' if signal['total_score'] >= 0 else 'negative'}">{signal['confidence']}%</span></div></div>
                    </div>""", unsafe_allow_html=True)
                    st.subheader("🛡️ 精確交易策略與風險控制")
                    is_buy = "買" in signal['action']
                    rr = abs((risk['tp'] - risk['entry']) / (risk['entry'] - risk['sl'])) if (risk['entry'] - risk['sl']) != 0 else "N/A"
                    st.markdown(f"""<div class="metric-container">
                        <div class="metric-card"><div class="metric-label">建議操作</div><div class="metric-value"><span class='{action_style}'>{signal['action'].split(" ")[0]}</span></div></div>
                        <div class="metric-card"><div class="metric-label">建議入場價</div><div class="metric-value" style="color: #FA8072; font-weight: bold;">~{risk['entry']:,.2f}</div></div>
                        <div class="metric-card"><div class="metric-label">🚀 斐波那契止盈 (TP)</div><div class="metric-value {'positive' if is_buy else 'negative'}">{risk['tp']:,.2f}</div></div>
                        <div class="metric-card"><div class="metric-label">🛑 斐波那契止損 (SL)</div><div class="metric-value {'negative' if is_buy else 'positive'}">{risk['sl']:,.2f}</div></div>
                    </div><div class="strategy-summary">💡 <b>策略總結:</b> 基於 {signal['action']} 信號，在 <b>~{risk['entry']:,.2f}</b> 範圍尋找機會 | ⚖️ <b>R:R:</b> {rr if isinstance(rr, str) else f'{rr:.2f}'} | ATR: {risk['atr']:.4f}</div>""", unsafe_allow_html=True)
                    st.subheader("🧠 關鍵技術指標")
                    st.markdown(pd.DataFrame.from_dict(signal['opinions'], orient='index', columns=['判斷結果']).to_html(escape=False, classes='custom-table'), unsafe_allow_html=True)
                    st.subheader("🛠️ 技術分析指標")
                    st.markdown(get_technical_data_df(df).to_html(escape=False, classes='custom-table'), unsafe_allow_html=True)
                    st.subheader("📊 完整技術分析圖表")
                    fig = make_subplots(rows=4, cols=1, shared_xaxes=True, vertical_spacing=0.04, row_heights=[0.55, 0.15, 0.15, 0.15], subplot_titles=("<b>價格與趨勢</b>", "<b>核心動能 (RSI / MACD)</b><br><sup><i>RSI > 80 超買, < 20 超賣</i></sup>", "<b>趨勢強度與資金流 (ADX / CMF)</b><br><sup><i>ADX > 25 趨勢增強, CMF > 0 資金流入</i></sup>", "<b>擺盪指標 (Stochastic %K)</b><br><sup><i>> 80 超買, < 20 超賣</i></sup>"))
                    fig.add_trace(go.Candlestick(x=df.index, open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], name='K線'), row=1, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=df['EMA_10'], name='EMA 10', line=dict(color='orange', width=1)), row=1, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=df['EMA_50'], name='EMA 50', line=dict(color='blue', width=1.5)), row=1, col=1)
                    if 'EMA_200' in df.columns and df['EMA_200'].notna().any(): fig.add_trace(go.Scatter(x=df.index, y=df['EMA_200'], name='EMA 200', line=dict(color='purple', width=2, dash='dash')), row=1, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=df['BB_High'], name='BB 高軌', line=dict(color='grey', width=1, dash='dash')), row=1, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=df['BB_Low'], name='BB 低軌', line=dict(color='grey', width=1, dash='dash')), row=1, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=df['RSI_9'], name='RSI', line=dict(color='purple')), row=2, col=1)
                    fig.add_hrect(y0=80, y1=100, line_width=0, fillcolor="red", opacity=0.2, row=2, col=1); fig.add_hrect(y0=0, y1=20, line_width=0, fillcolor="green", opacity=0.2, row=2, col=1)
                    fig.add_trace(go.Bar(x=df.index, y=df['MACD_Hist'], name='MACD Hist', marker_color=np.where(df['MACD_Hist'] > 0, '#dc3545', '#28a745')), row=2, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=df['ADX_9'], name='ADX', line=dict(color='brown')), row=3, col=1)
                    fig.add_hline(y=25, line_width=1, line_dash="dash", line_color="grey", row=3, col=1)
                    fig.add_trace(go.Bar(x=df.index, y=df['CMF'], name='CMF', marker_color=np.where(df['CMF'] > 0, '#28a745', '#dc3545')), row=3, col=1)
                    fig.add_hline(y=0, line_width=1, line_dash="dash", line_color="grey", row=3, col=1)
                    fig.add_trace(go.Scatter(x=df.index, y=df['Stoch_%K'], name='Stoch %K', line=dict(color='cyan')), row=4, col=1)
                    fig.add_hrect(y0=80, y1=100, line_width=0, fillcolor="red", opacity=0.2, row=4, col=1); fig.add_hrect(y0=0, y1=20, line_width=0, fillcolor="green", opacity=0.2, row=4, col=1)
                    fig.update_layout(height=1200, xaxis_rangeslider_visible=False, template="plotly_dark", legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))
                    fig.update_yaxes(title_text="價格", row=1, col=1); fig.update_yaxes(title_text="RSI/MACD", row=2, col=1)
                    fig.update_yaxes(title_text="ADX/CMF", row=3, col=1); fig.update_yaxes(title_text="Stoch %K", row=4, col=1)
                    st.plotly_chart(fig, use_container_width=True)
        else:
            st.error(f"數據不足或代碼 '{final_symbol}' 無效。請確認代碼是否正確（例如台股需加 .TW），或嘗試更長的分析週期。")
