# -*- coding: utf-8 -*-
"""
AI 趨勢分析 Streamlit 應用程式
專家增強最終版實作 (V7.1 - Content Refinement)

本應用程式根據一份詳細的金融分析工具設定文件進行開發，並融合了專業級的
app2.0.py 設計 logique 與使用者提供的 UI 視覺設計稿，旨在提供一個外觀精美、
互動專業的決策儀表板。

核心功能：
- [調整] 移除「最新相關新聞」區塊，讓版面更聚焦於數據分析
- [重大升級] 引入籌碼面(機構持股)分析，實現多維度決策
- [重大升級] 引入一目均衡表(Ichimoku)與柴金資金流(CMF)，擴充技術分析維度
- [重大升級] 實踐可解釋性AI(XAI)概念，升級「AI判讀」為決策依據列表
- [標準化] 統一所有分析表格 (AI判讀, 技術指標, 回測) 的色彩邏輯 (紅=多頭, 綠=空頭)
- [升級] 將主題還原為專業深色模式
- [升級] 像素級復刻 UI 設計，完全客製化 HTML/CSS 元件
- [修復/升級] 完整實作並升級為 Mark-to-Market 視覺化策略回測報告
- 擴充資產庫與智慧搜尋
- 精煉版技術指標計算引擎 (TA-Lib)
- AI 融合信號生成模型

開發者：程式碼專家 (Generated by Gemini)
版本：7.1.0 (Content Refinement)
"""

# 載入核心套件
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import ta
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re

# --- 1. 應用程式全域設定與靜態資料 ---

# 設置頁面配置
st.set_page_config(
    page_title="🚀 AI 趨勢分析專家系統",
    page_icon="📈",
    layout="wide"
)

# 全局 CSS 樣式
st.markdown("""
<style>
    /* 全局深色主題 */
    body, .stApp {
        background-color: #0E1117;
        color: #FAFAFA;
    }
    /* 側邊欄樣式 */
    [data-testid="stSidebar"] {
        background-color: #161A25;
        border-right: 1px solid #333;
    }
    /* 主要內容區塊 */
    .main .block-container {
        padding-top: 2rem;
    }
    /* 標題樣式 */
    h1, h2, h3, .st-info p {
        color: #E0E0E0 !important;
        font-weight: 600;
    }
    /* 自訂指標卡片容器 */
    .metric-container {
        display: flex;
        justify-content: space-between;
        gap: 15px;
        margin-bottom: 20px;
    }
    .metric-card {
        background-color: #161A25;
        border-radius: 8px;
        padding: 15px;
        flex-grow: 1;
        border: 1px solid #333;
    }
    .metric-label {
        font-size: 0.9em;
        color: #A0A0A0;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    .metric-value {
        font-size: 1.5em;
        font-weight: 600;
        color: #FAFAFA;
    }
    .metric-delta {
        font-size: 0.9em;
    }
    /* 顏色標記 (紅=多頭, 綠=空頭) */
    .positive { color: #dc3545; } /* 紅色 */
    .negative { color: #28a745; } /* 綠色 */
    .neutral { color: #ffc107; } /* 黃色 */
    /* 策略總結資訊框 */
    .strategy-summary {
        background-color: rgba(52, 152, 219, 0.1);
        border-left: 5px solid #3498db;
        padding: 15px;
        border-radius: 8px;
        margin-top: 10px;
        font-size: 0.95em;
    }
    /* 自訂表格樣式 */
    .custom-table {
        width: 100%;
        border-collapse: collapse;
    }
    .custom-table th, .custom-table td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #333;
    }
    .custom-table th {
        background-color: #161A25;
        color: #A0A0A0;
        font-weight: 500;
    }
    .custom-table td {
        color: #E0E0E0;
    }
</style>
""", unsafe_allow_html=True)


# 擴充後的資產庫
FULL_SYMBOLS_MAP = {
    "TSLA": {"name": "特斯拉", "keywords": ["特斯拉", "電動車", "TSLA", "Tesla"]},
    "NVDA": {"name": "輝達", "keywords": ["輝達", "英偉達", "AI", "NVDA", "Nvidia"]},
    "AAPL": {"name": "蘋果", "keywords": ["蘋果", "Apple", "AAPL"]},
    "GOOGL": {"name": "谷歌/Alphabet", "keywords": ["谷歌", "Alphabet", "GOOGL", "GOOG"]},
    "MSFT": {"name": "微軟", "keywords": ["微軟", "Microsoft", "MSFT"]},
    "SPY": {"name": "SPDR 標普500 ETF", "keywords": ["SPY", "標普ETF"]},
    "^GSPC": {"name": "S&P 500 指數", "keywords": ["標普", "S&P500", "^GSPC", "SPX"]},
    "2330.TW": {"name": "台積電", "keywords": ["台積電", "2330", "TSMC"]},
    "2317.TW": {"name": "鴻海", "keywords": ["鴻海", "2317", "Foxconn"]},
    "2454.TW": {"name": "聯發科", "keywords": ["聯發科", "2454", "MediaTek"]},
    "0050.TW": {"name": "元大台灣50", "keywords": ["台灣50", "0050", "台灣五十"]},
    "^TWII": {"name": "台股指數", "keywords": ["台股指數", "加權指數", "^TWII"]},
    "BTC-USD": {"name": "比特幣", "keywords": ["比特幣", "BTC", "bitcoin", "BTC-USDT"]},
    "ETH-USD": {"name": "以太坊", "keywords": ["以太坊", "ETH", "ethereum", "ETH-USDT"]},
    "SOL-USD": {"name": "Solana", "keywords": ["Solana", "SOL", "SOL-USDT"]},
}

# 建立資產類別映射
CATEGORY_MAP = {
    "美股": [c for c in FULL_SYMBOLS_MAP.keys() if not (c.endswith(".TW") or c.endswith("-USD") or c.startswith("^TWII"))],
    "台股": [c for c in FULL_SYMBOLS_MAP.keys() if c.endswith(".TW") or c.startswith("^TWII")],
    "加密貨幣": [c for c in FULL_SYMBOLS_MAP.keys() if c.endswith("-USD")],
}

CATEGORY_HOT_OPTIONS = {
    category: {f"{code} - {FULL_SYMBOLS_MAP[code]['name']}": code for code in sorted(codes)}
    for category, codes in CATEGORY_MAP.items()
}

# 分析週期 (PERIOD_MAP)
PERIOD_MAP = {
    '30 分': ('60d', '30m'),
    '4 小時': ('1y', '60m'),
    '1 日': ('5y', '1d'),
    '1 週': ('max', '1wk')
}

# --- 2. 核心功能函式 (後端邏輯) ---

def get_symbol_from_query(query: str) -> str:
    query = query.strip()
    query_upper = query.upper()
    for code, data in FULL_SYMBOLS_MAP.items():
        if query_upper == code or query == data["name"] or any(query_upper == kw.upper() for kw in data["keywords"]):
            return code
    if re.fullmatch(r'\d{4,6}', query):
        return f"{query}.TW"
    return query_upper

@st.cache_data(ttl=600)
def get_data(symbol, period, interval):
    try:
        df = yf.Ticker(symbol).history(period=period, interval=interval)
        if df.empty: return None
        df.columns = [col.capitalize() for col in df.columns]
        return df[['Open', 'High', 'Low', 'Close', 'Volume']]
    except Exception: return None

@st.cache_data
def calculate_indicators(df):
    # 移動平均線
    df['EMA_10'] = ta.trend.ema_indicator(df['Close'], window=10)
    df['EMA_50'] = ta.trend.ema_indicator(df['Close'], window=50)
    df['EMA_200'] = ta.trend.ema_indicator(df['Close'], window=200)
    df['SMA_20'] = ta.trend.sma_indicator(df['Close'], window=20)
    # MACD
    macd = ta.trend.MACD(df['Close'], window_fast=8, window_slow=17, window_sign=9)
    df['MACD_Hist'] = macd.macd_diff()
    # 動能
    df['RSI_9'] = ta.momentum.rsi(df['Close'], window=9)
    stoch = ta.momentum.StochasticOscillator(df['High'], df['Low'], df['Close'], window=14, smooth_window=3)
    df['Stoch_%K'] = stoch.stoch()
    # 趨勢強度
    df['ADX_9'] = ta.trend.adx(df['High'], df['Low'], df['Close'], window=9)
    # 波動率
    df['ATR_9'] = ta.volatility.average_true_range(df['High'], df['Low'], df['Close'], window=9)
    bb = ta.volatility.BollingerBands(df['Close'], window=20, window_dev=2)
    df['BB_High'] = bb.bollinger_hband()
    df['BB_Low'] = bb.bollinger_lband()
    # 成交量
    df['OBV'] = ta.volume.on_balance_volume(df['Close'], df['Volume'])
    df['OBV_EMA'] = ta.trend.ema_indicator(df['OBV'], window=20)
    df['CMF'] = ta.volume.chaikin_money_flow(df['High'], df['Low'], df['Close'], df['Volume'], window=20)
    # 一目均衡表
    ichimoku = ta.trend.IchimokuIndicator(df['High'], df['Low'])
    df['Ichimoku_A'] = ichimoku.ichimoku_a()
    df['Ichimoku_B'] = ichimoku.ichimoku_b()
    
    df.dropna(inplace=True)
    return df

@st.cache_data(ttl=3600)
def get_fundamental_data(symbol):
    try:
        if any(keyword in symbol for keyword in ['-USD', '^']): return {'info': {}}
        ticker = yf.Ticker(symbol)
        return {'info': ticker.info}
    except: return {'info': {}}

def calculate_fundamental_scores(info):
    roe = info.get('returnOnEquity', 0) or 0
    pe = info.get('trailingPE', 99) or 99
    fcf = info.get('freeCashflow', 0) or 0
    cash = info.get('totalCash', 0) or 0
    debt = info.get('totalDebt', 1) or 1
    
    roe_s = 3 if roe > 0.15 else (2 if roe > 0.10 else (1 if roe > 0 else 0))
    pe_s = 3 if 0 < pe < 15 else (2 if 0 < pe < 25 else (1 if 0 < pe < 35 else 0))
    cf_s = 3 if fcf > 0 and cash > debt else (2 if fcf > 0 or cash > debt else (1 if cash > debt * 0.5 else 0))
    
    score = roe_s + pe_s + cf_s
    msg = f"頂級優異 (強護城河), ROE > 15%" if score >= 7 else ("良好穩健" if score >= 5 else ("中性警示" if score >= 3 else "基本面較弱"))
    return {'display_score': score, 'message': msg}

def generate_ai_fusion_signal(df, funda_scores, inst_hold_pct):
    latest, prev = df.iloc[-1], df.iloc[-2]
    opinions = {}
    
    ema_10, ema_50, ema_200 = latest['EMA_10'], latest['EMA_50'], latest['EMA_200']
    if ema_10 > ema_50 and ema_50 > ema_200: ma_score, opinions['趨勢分析 (MA 排列)'] = 2.0, "<span class='positive'>強勢多頭排列: **10 > 50 > 200**</span>"
    elif ema_10 < ema_50 and ema_50 < ema_200: ma_score, opinions['趨勢分析 (MA 排列)'] = -2.0, "<span class='negative'>強勢空頭排列: **10 < 50 < 200**</span>"
    elif ema_10 > ema_50 and prev['EMA_10'] <= prev['EMA_50']: ma_score, opinions['趨勢分析 (MA 排列)'] = 3.5, "<span class='positive'>**🚀 黃金交叉**</span>"
    elif ema_10 < ema_50 and prev['EMA_10'] >= prev['EMA_50']: ma_score, opinions['趨勢分析 (MA 排列)'] = -3.5, "<span class='negative'>**💀 死亡交叉**</span>"
    else: ma_score, opinions['趨勢分析 (MA 排列)'] = 0, "<span class='neutral'>中性盤整</span>"

    rsi = latest['RSI_9']
    if rsi < 30: momentum_score, opinions['動能分析 (RSI 9)'] = 2.0, f"<span class='positive'>強化: RSI {rsi:.1f} < 30, 進入超賣區</span>"
    elif rsi > 70: momentum_score, opinions['動能分析 (RSI 9)'] = -2.0, f"<span class='negative'>警告: RSI {rsi:.1f} > 70, 進入超買區</span>"
    else: momentum_score, opinions['動能分析 (RSI 9)'] = 0, f"<span class='neutral'>中性: RSI {rsi:.1f}</span>"

    macd = latest['MACD_Hist']
    if macd > 0 and macd > prev['MACD_Hist']: strength_score, opinions['趨勢強度 (MACD)'] = 1.5, "<span class='positive'>多頭動能增強</span>"
    elif macd < 0 and macd < prev['MACD_Hist']: strength_score, opinions['趨勢強度 (MACD)'] = -1.5, "<span class='negative'>空頭動能增強</span>"
    else: strength_score, opinions['趨勢強度 (MACD)'] = 0, "<span class='neutral'>動能盤整</span>"
    if latest['ADX_9'] > 25: strength_score *= 1.5; opinions['趨勢強度 (ADX 9)'] = f"<span class='positive'>確認強趨勢: ADX {latest['ADX_9']:.1f} > 25</span>"
    else: opinions['趨勢強度 (ADX 9)'] = f"<span class='neutral'>盤整: ADX {latest['ADX_9']:.1f} < 25</span>"

    if latest['CMF'] > 0: opinions['資金流分析 (CMF)'] = "<span class='positive'>資金流入</span>"
    else: opinions['資金流分析 (CMF)'] = "<span class='negative'>資金流出</span>"

    stoch_k = latest['Stoch_%K']
    if stoch_k < 20: opinions['擺盪指標 (Stochastic)'] = f"<span class='positive'>強化: 隨機指標超賣 ({stoch_k:.1f} < 20)</span>"
    elif stoch_k > 80: opinions['擺盪指標 (Stochastic)'] = f"<span class='negative'>警告: 隨機指標超買 ({stoch_k:.1f} > 80)</span>"
    else: opinions['擺盪指標 (Stochastic)'] = f"<span class='neutral'>中性 ({stoch_k:.1f})</span>"
    
    if inst_hold_pct:
        if inst_hold_pct > 0.5: opinions['籌碼面分析 (機構持股)'] = f"<span class='positive'>法人高度認同 ({inst_hold_pct:.1%})</span>"
        else: opinions['籌碼面分析 (機構持股)'] = f"<span class='neutral'>法人籌碼中性 ({inst_hold_pct:.1%})</span>"
    
    fa_score = funda_scores['display_score']
    opinions['基本面診斷'] = f"<span class='{'positive' if fa_score >= 7 else ('neutral' if fa_score >=5 else 'negative')}'>{funda_scores['message']}</span>"

    fa_norm = ((fa_score / 9) * 6) - 3 if fa_score > 0 else 0
    total_score = ma_score + momentum_score + strength_score + fa_norm
    
    action = "觀望 (Neutral)"
    if total_score >= 4.0: action = "買進 (Buy)"
    elif total_score >= 1.0: action = "中性偏買 (Hold/Buy)"
    elif total_score <= -4.0: action = "賣出 (Sell/Short)"
    elif total_score <= -1.0: action = "中性偏賣 (Hold/Sell)"
    
    confidence = min(100, int(50 + (total_score / 10) * 50))
    return {'total_score': total_score, 'action': action, 'confidence': confidence, 'opinions': opinions}

def calculate_risk_management(df):
    latest = df.iloc[-1]
    atr = latest['ATR_9']
    entry = latest['Close']
    return {'sl': entry - 2 * atr, 'tp': entry + 4 * atr, 'entry': entry, 'atr': atr}

def run_backtest(df, initial_capital=100000):
    if df.empty or 'SMA_20' not in df.columns or 'EMA_50' not in df.columns:
        return {}
    
    df['signal'] = 0
    df.loc[(df['SMA_20'] > df['EMA_50']) & (df['SMA_20'].shift(1) <= df['EMA_50'].shift(1)), 'signal'] = 1
    df.loc[(df['SMA_20'] < df['EMA_50']) & (df['SMA_20'].shift(1) >= df['EMA_50'].shift(1)), 'signal'] = -1

    cash = initial_capital
    position_size = 0
    entry_price = 0
    trades = []
    equity_curve_values = []

    for i in range(len(df)):
        if df['signal'].iloc[i] == 1 and position_size == 0:
            position_size = cash / df['Close'].iloc[i]
            entry_price = df['Close'].iloc[i]
            cash = 0
        elif df['signal'].iloc[i] == -1 and position_size > 0:
            cash = position_size * df['Close'].iloc[i]
            profit = cash - (position_size * entry_price)
            trades.append(profit)
            position_size = 0

        current_equity = cash + (position_size * df['Close'].iloc[i])
        equity_curve_values.append(current_equity)

    if position_size > 0:
        final_cash = position_size * df['Close'].iloc[-1]
        profit = final_cash - (position_size * entry_price)
        trades.append(profit)

    if not trades:
        return {"total_return": 0, "win_rate": 0, "max_drawdown": 0, "total_trades": 0, "equity_curve": pd.Series([initial_capital]*len(df), index=df.index)}

    equity_curve = pd.Series(equity_curve_values, index=df.index)
    
    total_return = (equity_curve.iloc[-1] / initial_capital - 1) * 100
    win_rate = (len([t for t in trades if t > 0]) / len(trades)) * 100 if trades else 0
    
    roll_max = equity_curve.cummax()
    daily_drawdown = equity_curve / roll_max - 1.0
    max_drawdown = abs(daily_drawdown.min() * 100)

    return {
        "total_return": total_return,
        "win_rate": win_rate,
        "max_drawdown": max_drawdown,
        "total_trades": len(trades),
        "equity_curve": equity_curve
    }

def get_technical_data_df(df):
    if df.empty: return pd.DataFrame()
    latest = df.iloc[-1]
    data = []
    
    ema_10, ema_50, ema_200 = latest['EMA_10'], latest['EMA_50'], latest['EMA_200']
    if ema_10 > ema_50 and ema_50 > ema_200: conclusion_ma = "<span class='positive'>**強多頭：MA 多頭排列**</span>"
    else: conclusion_ma = "<span class='neutral'>中性：MA 糾結或趨勢發展中</span>"
    data.append(['價格 vs. EMA 10/50/200', f"{latest['Close']:,.2f}", conclusion_ma])
    
    rsi = latest['RSI_9']
    if rsi > 70: conclusion_rsi = f"<span class='negative'>警告：超買區域 ({rsi:.1f})</span>"
    elif rsi < 30: conclusion_rsi = f"<span class='positive'>強化：超賣區域 ({rsi:.1f})</span>"
    else: conclusion_rsi = "<span class='neutral'>中性</span>"
    data.append(['RSI (9) 動能', f"{rsi:.2f}", conclusion_rsi])

    adx = latest['ADX_9']
    if adx > 25: conclusion_adx = f"<span class='positive'>強趨勢 ({adx:.1f})</span>"
    else: conclusion_adx = f"<span class='neutral'>盤整</span>"
    data.append(['ADX (9) 趨勢強度', f"{adx:.2f}", conclusion_adx])

    cmf = latest['CMF']
    cmf_conclusion = f"<span class='positive'>資金流入 ({cmf:.2f})</span>" if cmf > 0 else f"<span class='negative'>資金流出 ({cmf:.2f})</span>"
    data.append(['柴金資金流 (CMF)', f"{cmf:.2f}", cmf_conclusion])
    
    stoch_k = latest['Stoch_%K']
    if stoch_k > 80: conclusion_stoch = f"<span class='negative'>超買 ({stoch_k:.1f})</span>"
    elif stoch_k < 20: conclusion_stoch = f"<span class='positive'>超賣 ({stoch_k:.1f})</span>"
    else: conclusion_stoch = f"<span class='neutral'>中性 ({stoch_k:.1f})</span>"
    data.append(['隨機指標 %K (14,3)', f"{stoch_k:.2f}", conclusion_stoch])

    ichimoku_a, ichimoku_b, close = latest['Ichimoku_A'], latest['Ichimoku_B'], latest['Close']
    if close > ichimoku_a and close > ichimoku_b: ichi_conclusion = "<span class='positive'>突破雲區</span>"
    elif close < ichimoku_a and close < ichimoku_b: ichi_conclusion = "<span class='negative'>跌破雲區</span>"
    else: ichi_conclusion = "<span class='neutral'>雲區盤整</span>"
    data.append(['一目均衡表 (雲區)', f"{close:,.2f}", ichi_conclusion])

    bb_w = (latest['BB_High'] - latest['BB_Low']) / latest['Close'] * 100
    data.append(['布林通道 (BB: 20/2)', f"{latest['Close']:,.2f}", f"<span class='neutral'>中性：在上下軌間 ({bb_w:.2f}% 寬度)</span>"])

    return pd.DataFrame(data, columns=['指標名稱', '最新值', '分析結論']).set_index('指標名稱')


# --- 3. Streamlit 使用者介面 (UI) ---

with st.sidebar:
  
    st.subheader("1. 選擇資產類別")
    def on_change_callback(): st.session_state.manual_input = ""
    selected_category = st.selectbox("資產類別", list(CATEGORY_HOT_OPTIONS.keys()), on_change=on_change_callback, key="sb_category", label_visibility="collapsed")
    
    st.subheader("2. 選擇或輸入標的")
    selected_asset = st.selectbox("熱門標的", list(CATEGORY_HOT_OPTIONS[selected_category].keys()), on_change=on_change_callback, key="sb_asset", label_visibility="collapsed")
    manual_input = st.text_input("或手動輸入代碼", placeholder="例如: 2330.TW, TSLA", key='manual_input', label_visibility="collapsed")
    
    query = st.session_state.manual_input.strip() or CATEGORY_HOT_OPTIONS[selected_category][selected_asset]
    final_symbol = get_symbol_from_query(query)
    final_symbol_name = FULL_SYMBOLS_MAP.get(final_symbol, {}).get('name', final_symbol)
    
    st.markdown(f"**當前目標:** `{final_symbol}`")
    st.markdown("---")
    
    st.subheader("3. 選擇週期")
    selected_period_label = st.selectbox("分析時間週期", list(PERIOD_MAP.keys()), index=2, label_visibility="collapsed")
    period, interval = PERIOD_MAP[selected_period_label]
    
    st.markdown("---")
    st.subheader("4. 開始分析")
    start_analysis = st.button("📊 執行AI分析", use_container_width=True)


# --- 主畫面顯示 ---
if not start_analysis:
    # 歡迎頁面 - 更新版本
    st.markdown("<h1 style='color: #FA8072; font-size: 32px; font-weight: bold;'>🚀 歡迎使用 AI 趨勢分析</h1>", unsafe_allow_html=True)
    st.markdown("請在左側選擇或輸入您想分析的標的（例如：**2330.TW**、**NVDA**、**BTC-USD**），然後點擊 <span style='color: #FA8072; font-weight: bold;'>『📊 執行AI分析』</span> 按鈕開始。", unsafe_allow_html=True)
    st.markdown("---")
    
    st.subheader("📝 使用步驟：")
    st.markdown("""
    1.  **選擇資產類別**: 在左側欄選擇 `美股`、`台股` 或 `加密貨幣`。
    2.  **選擇標的**: 使用下拉選單快速選擇熱門標的，或直接在輸入框中鍵入代碼或名稱。
    3.  **選擇週期**: 決定分析的長度（例如：`30 分`、`4 小時`、`1 日`、`1 周`）。
    4.  **執行分析**: 點擊 <span style='color: #FA8072; font-weight: bold;'>『📊 執行AI分析』</span>，AI將融合基本面與技術面指標提供交易策略。
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.markdown("⚠️ **綜合風險與免責聲明 (Risk & Disclaimer)**")
    st.markdown(
        """
        本AI趨勢分析模型，是基於量化集成學習 (Ensemble)的專業架構。其分析結果僅供參考用途。
        投資涉及風險，所有交易決策應基於您個人的獨立研究和財務狀況，並強烈建議諮詢專業金融顧問。
        """
    )
    st.caption("📊 **數據來源:** Yahoo Finance | 🛠️ **技術指標:** TA 庫 | 💻 **APP優化:** 專業程式碼專家")

else:
    # 分析結果頁面
    with st.spinner(f'AI 分析引擎啟動中，正在分析 {final_symbol_name}...'):
        data = get_data(final_symbol, period, interval)

        if data is not None and len(data) > 50:
            df = calculate_indicators(data.copy())
            
            if df.empty:
                st.error("錯誤：數據不足以計算技術指標，請嘗試更長的分析週期。")
            else:
                funda = get_fundamental_data(final_symbol)
                funda_scores = calculate_fundamental_scores(funda['info'])
                inst_hold_pct = funda['info'].get('heldPercentInstitutions')
                signal = generate_ai_fusion_signal(df, funda_scores, inst_hold_pct)
                risk = calculate_risk_management(df)
                backtest = run_backtest(df.copy())
                
                price_change = risk['entry'] - df['Close'].iloc[-2]
                price_change_pct = (price_change / df['Close'].iloc[-2]) * 100

                # --- 渲染 UI ---
                st.header(f"📈 {final_symbol_name} ({final_symbol}) AI趨勢分析")
                st.markdown(f"**分析週期:** `{selected_period_label}` | **基本面診斷:** `{funda_scores['display_score']}/9 ({funda_scores['message']})`")
                st.markdown("---")

                # 核心行動
                st.subheader("💡 核心行動與量化評分")
                score_color_class = 'positive' if signal['total_score'] >= 0 else 'negative'
                short_action_text = signal['action'].split(" ")[0]
                action_style = 'positive' if '買' in short_action_text else ('negative' if '賣' in short_action_text else 'neutral')
                
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-card"><div class="metric-label">💰 當前價格</div><div class="metric-value">{risk['entry']:,.2f} <span class="metric-delta {'positive' if price_change >= 0 else 'negative'}">{price_change:+.2f} ({price_change_pct:+.2f}%)</span></div></div>
                    <div class="metric-card"><div class="metric-label">🎯 最終行動建議</div><div class="metric-value"><span class='{action_style}'>{signal['action']}</span></div></div>
                    <div class="metric-card"><div class="metric-label">🔥 總量化評分</div><div class="metric-value"><span class="{score_color_class}">{signal['total_score']:.2f}</span></div></div>
                    <div class="metric-card"><div class="metric-label">🛡️ 信心指數</div><div class="metric-value"><span class="{score_color_class}">{signal['confidence']}%</span></div></div>
                </div>
                """, unsafe_allow_html=True)

                # 風險控制
                st.subheader("🛡️ 精確交易策略與風險控制")
                risk_reward_ratio = (risk['tp'] - risk['entry']) / (risk['entry'] - risk['sl']) if (risk['entry'] - risk['sl']) != 0 else float('inf')
                st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-card"><div class="metric-label">建議操作</div><div class="metric-value"><span class='{action_style}'>{short_action_text}</span></div></div>
                    <div class="metric-card"><div class="metric-label">建議入場價</div><div class="metric-value" style="color: #FA8072; font-weight: bold;">~{risk['entry']:,.2f}</div></div>
                    <div class="metric-card"><div class="metric-label">🚀 止盈價 (TP)</div><div class="metric-value positive">{risk['tp']:,.2f}</div></div>
                    <div class="metric-card"><div class="metric-label">🛑 止損價 (SL)</div><div class="metric-value negative">{risk['sl']:,.2f}</div></div>
                </div>
                <div class="strategy-summary">
                💡 <b>策略總結:</b> 基於 {signal['action']} 信號，建議在 <b>~{risk['entry']:,.2f}</b> 範圍內尋找機會 | ⚖️ <b>風險/回報比 (R:R):</b> {risk_reward_ratio:.2f} | 波動單位 (ATR): {risk['atr']:.4f}
                </div>
                """, unsafe_allow_html=True)
                
                # AI 判讀 (XAI)
                st.subheader("🧠 關鍵技術指標")
                opinions_html = "<table class='custom-table'><thead><tr><th>AI領域</th><th>判斷結果</th></tr></thead><tbody>"
                for dim, result in signal['opinions'].items():
                    opinions_html += f"<tr><td>{dim}</td><td>{result}</td></tr>"
                opinions_html += "</tbody></table>"
                st.markdown(opinions_html, unsafe_allow_html=True)

                # 技術指標狀態表
                st.subheader("🛠️ 技術指標狀態表")
                tech_df = get_technical_data_df(df)
                st.markdown(tech_df.to_html(escape=False, classes='custom-table'), unsafe_allow_html=True)
                
                # 回測報告
                st.subheader("🧪 策略回測報告")
                if backtest and backtest.get("total_trades", 0) > 0:
                    st.markdown(f"""
                    <div class="metric-container">
                        <div class="metric-card"><div class="metric-label">📊 總回報率</div><div class="metric-value {'positive' if backtest['total_return'] > 0 else 'negative'}">{backtest['total_return']:.2f}%</div></div>
                        <div class="metric-card"><div class="metric-label">📈 勝率</div><div class="metric-value {'positive' if backtest['win_rate'] > 50 else 'negative'}">{backtest['win_rate']:.2f}%</div></div>
                        <div class="metric-card"><div class="metric-label">📉 最大回撤 (MDD)</div><div class="metric-value negative">{abs(backtest['max_drawdown']):.2f}%</div></div>
                        <div class="metric-card"><div class="metric-label">🤝 交易總次數</div><div class="metric-value neutral">{backtest['total_trades']}</div></div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    fig_bt = go.Figure()
                    fig_bt.add_trace(go.Scatter(x=backtest['equity_curve'].index, y=backtest['equity_curve'], name='策略資金曲線', line=dict(color='#FA8072', width=2)))
                    fig_bt.update_layout(title='SMA 20/EMA 50 交叉策略資金曲線', template='plotly_dark', height=300, margin=dict(l=20, r=20, t=40, b=20))
                    st.plotly_chart(fig_bt, use_container_width=True)
                else:
                    st.info("此區間無交易信號，或數據不足以進行回測。")

                # 技術圖表
                st.subheader("📊 完整技術分析圖表")
                fig = make_subplots(
                    rows=2, cols=1, shared_xaxes=True, 
                    vertical_spacing=0.08, row_heights=[0.7, 0.3],
                    subplot_titles=("價格走勢", "指標區"),
                    specs=[[{"secondary_y": True}], [{"secondary_y": True}]]
                )
                
                fig.add_trace(go.Candlestick(x=df.index, open=df['Open'], high=df['High'], low=df['Low'], close=df['Close'], name='K線',
                                             increasing_line_color='#dc3545', decreasing_line_color='#28a745'), row=1, col=1, secondary_y=False)
                fig.add_trace(go.Bar(x=df.index, y=df['Volume'], name='成交量', marker_color='grey', opacity=0.3), row=1, col=1, secondary_y=True)
                fig.add_trace(go.Scatter(x=df.index, y=df['EMA_10'], name='EMA 10', line=dict(color='orange', width=1)), row=1, col=1, secondary_y=False)
                fig.add_trace(go.Scatter(x=df.index, y=df['EMA_50'], name='EMA 50', line=dict(color='blue', width=1.5)), row=1, col=1, secondary_y=False)
                fig.add_trace(go.Scatter(x=df.index, y=df['EMA_200'], name='EMA 200', line=dict(color='purple', width=2, dash='dash')), row=1, col=1, secondary_y=False)
                
                colors = np.where(df['MACD_Hist'] > 0, '#dc3545', '#28a745')
                fig.add_trace(go.Bar(x=df.index, y=df['MACD_Hist'], name='MACD Hist', marker_color=colors), row=2, col=1, secondary_y=False)
                fig.add_trace(go.Scatter(x=df.index, y=df['RSI_9'], name='RSI', line=dict(color='purple')), row=2, col=1, secondary_y=False)
                fig.add_trace(go.Scatter(x=df.index, y=df['ADX_9'], name='ADX', line=dict(color='brown', dash='dot')), row=2, col=1, secondary_y=True)

                fig.update_layout(
                    height=800, 
                    xaxis_rangeslider_visible=False, 
                    template="plotly_dark",
                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                )
                fig.update_yaxes(title_text="價格", row=1, col=1, secondary_y=False)
                fig.update_yaxes(showticklabels=False, showgrid=False, zeroline=False, row=1, col=1, secondary_y=True)
                
                fig.update_yaxes(title_text="指標", row=2, col=1, secondary_y=False)
                fig.update_yaxes(title_text="ADX", range=[0, 100], row=2, col=1, secondary_y=True, showgrid=False)

                st.plotly_chart(fig, use_container_width=True)
        else:
            st.error(f"數據不足或代碼 '{final_symbol}' 無效。請確認代碼是否正確（台股需加 .TW）。")

