# -*- coding: utf-8 -*-
"""
AI 趨勢分析 Streamlit 應用程式
專家增強最終版實作 (V2.0 - Interactive Dashboard)

本應用程式根據一份詳細的金融分析工具設定文件進行開發，
旨在提供一個整合性的股票、ETF、指數及加密貨幣的 AI 趨勢分析平台。

核心功能：
- [升級] 互動式決策儀表板
- [升級] 可解釋性 AI (XAI) 決策依據展示
- [升級] 包含動態部位規模計算的專業風險管理
- 統一技術指標計算引擎
- 雙軌制基本面評分系統
- AI 融合信號生成模型
- 標準化策略回測引擎

開發者：程式碼專家 (Generated by Gemini)
版本：2.0.0 (Major Refactor based on Expert Document)
"""

# 載入核心套件
import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import pandas_ta as ta
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# --- 1. 應用程式全域設定與靜態資料 ---

# 設置頁面配置 (寬版)
st.set_page_config(
    page_title="🚀 AI 趨勢分析專家系統",
    page_icon="📈",
    layout="wide"
)

# (NEW v2.0) 應用程式的自訂 CSS 樣式
st.markdown("""
<style>
    /* 主要標題與按鈕的淡鮭魚色調 */
    .salmon-text {
        color: #FA8072;
    }
    /* 強調說明文字 */
    .stButton>button {
        border-color: #FA8072;
        color: #FA8072;
    }
    .stButton>button:hover {
        border-color: #E9967A;
        color: #E9967A;
    }
</style>
""", unsafe_allow_html=True)


# 資產庫 (FULL_SYMBOLS_MAP)
FULL_SYMBOLS_MAP = {
    '美股': {
        'AAPL': {'name': '蘋果', 'keywords': ['Apple', 'iPhone']},
        'GOOGL': {'name': 'Alphabet (Google)', 'keywords': ['google', 'android']},
        'MSFT': {'name': '微軟', 'keywords': ['Microsoft', 'windows']},
        'NVDA': {'name': '輝達', 'keywords': ['Nvidia', 'AI', 'GPU']},
        'TSLA': {'name': '特斯拉', 'keywords': ['Tesla', 'EV']},
        'SPY': {'name': 'S&P 500 ETF', 'keywords': ['sp500', 'index']},
        '^GSPC': {'name': 'S&P 500 指數', 'keywords': ['spx']}
    },
    '台股': {
        '2330.TW': {'name': '台積電', 'keywords': ['TSMC']},
        '2317.TW': {'name': '鴻海', 'keywords': ['foxconn']},
        '2454.TW': {'name': '聯發科', 'keywords': ['mediatek']},
        '0050.TW': {'name': '元大台灣50', 'keywords': ['etf']},
        '^TWII': {'name': '台灣加權指數', 'keywords': ['taiex']}
    },
    '加密貨幣': {
        'BTC-USD': {'name': '比特幣', 'keywords': ['Bitcoin']},
        'ETH-USD': {'name': '以太幣', 'keywords': ['Ethereum']},
        'SOL-USD': {'name': 'Solana', 'keywords': ['sol']},
    }
}

# 分析週期 (PERIOD_MAP)
PERIOD_MAP = {
    '30 分': {'period': '60d', 'interval': '30m'},
    '4 小時': {'period': '1y', 'interval': '60m'},
    '1 日': {'period': '5y', 'interval': '1d'},
    '1 週': {'period': 'max', 'interval': '1wk'}
}

# --- 2. 核心功能函式 (後端邏輯) ---

@st.cache_data(ttl=600)
def get_data(symbol, period, interval):
    """
    使用 yfinance 獲取指定資產的歷史市場數據。
    """
    try:
        ticker = yf.Ticker(symbol)
        df = ticker.history(period=period, interval=interval)
        if df.empty:
            st.error(f"錯誤：無法獲取 '{symbol}' 的數據。請檢查代碼或更換分析週期。")
            return None
        df.index = pd.to_datetime(df.index)
        if 'USD' in symbol:
             df.index = df.index.tz_convert(None)
        else:
             df.index = df.index.tz_localize(None)
        return df
    except Exception as e:
        st.error(f"數據獲取時發生錯誤：{e}")
        return None

@st.cache_data
def calculate_indicators(df):
    """
    統一計算所有必要的技術指標。
    """
    df.ta.ema(length=10, append=True)
    df.ta.ema(length=50, append=True)
    df.ta.ema(length=200, append=True)
    df.ta.macd(fast=12, slow=26, signal=9, append=True)
    df.ta.adx(length=14, append=True)
    df.ta.rsi(length=14, append=True)
    df.ta.bbands(length=20, std=2, append=True)
    df.ta.atr(length=14, append=True)
    df.ta.obv(append=True)
    df.ta.cmf(length=20, append=True)
    df.dropna(inplace=True)
    return df

@st.cache_data(ttl=3600)
def get_fundamental_data(symbol):
    """
    獲取基本面數據與新聞。
    """
    try:
        if any(keyword in symbol for keyword in ['-USD', '^']):
             return {'info': {}, 'news': [{'title': '指數或加密貨幣無基本面/新聞數據'}]}
        ticker = yf.Ticker(symbol)
        info = ticker.info
        news = ticker.news
        return {'info': info, 'news': news[:5]}
    except Exception:
        return {'info': {}, 'news': [{'title': '無法獲取此資產的基本面/新聞數據'}]}

def calculate_fundamental_scores(info):
    """
    雙軌制基本面評分。
    """
    ai_score, display_score = 0, 0
    roe = info.get('returnOnEquity', 0)
    debt_to_equity = info.get('debtToEquity')
    revenue_growth = info.get('revenueGrowth', 0)
    pe_ratio = info.get('trailingPE')
    peg_ratio = info.get('pegRatio')
    free_cash_flow = info.get('freeCashflow', 0)
    total_cash = info.get('totalCash', 0)
    total_debt = info.get('totalDebt', 1)

    if roe is not None and roe > 0.15: ai_score += 2
    if debt_to_equity is not None and debt_to_equity < 50: ai_score += 2
    if revenue_growth is not None and revenue_growth > 0.10: ai_score += 1
    if pe_ratio is not None and pe_ratio < 15: ai_score += 1
    if peg_ratio is not None and peg_ratio < 1: ai_score += 1

    if roe is not None:
        if roe > 0.15: display_score += 3
        elif roe > 0.10: display_score += 2
        elif roe > 0: display_score += 1
    if pe_ratio is not None:
        if pe_ratio < 15: display_score += 3
        elif pe_ratio < 25: display_score += 2
        elif pe_ratio < 35: display_score += 1
    if free_cash_flow > 0 and total_cash > total_debt: display_score += 3
    elif free_cash_flow > 0 or total_cash > total_debt: display_score += 2
    elif total_cash > total_debt * 0.5: display_score += 1
        
    return {'ai_score': ai_score, 'display_score': display_score}

def generate_ai_fusion_signal(df, fa_score):
    """
    AI 融合信號生成模型。
    (UPDATED v2.0) 返回詳細的決策依據分數 (decision_factors)
    """
    latest, prev = df.iloc[-1], df.iloc[-2]
    decision_factors = {}

    ma_score = 0
    if latest['EMA_10'] > latest['EMA_50'] and prev['EMA_10'] <= prev['EMA_50']: ma_score = 3.5
    elif latest['EMA_10'] < latest['EMA_50'] and prev['EMA_10'] >= prev['EMA_50']: ma_score = -3.5
    elif latest['EMA_10'] > latest['EMA_50'] and latest['EMA_50'] > latest['EMA_200']: ma_score = 2.0
    elif latest['EMA_10'] < latest['EMA_50'] and latest['EMA_50'] < latest['EMA_200']: ma_score = -2.0
    decision_factors['趨勢分數 (MA Score)'] = ma_score

    momentum_score = 0
    if latest['RSI_14'] < 40: momentum_score = 2.0
    elif latest['RSI_14'] > 60: momentum_score = -2.0
    decision_factors['動能分數 (Momentum Score)'] = momentum_score
        
    strength_score = 0
    if latest['MACDh_12_26_9'] > 0 and latest['MACDh_12_26_9'] > prev['MACDh_12_26_9']: strength_score = 1.5
    elif latest['MACDh_12_26_9'] < 0 and latest['MACDh_12_26_9'] < prev['MACDh_12_26_9']: strength_score = -1.5
    if latest['ADX_14'] > 25: strength_score *= 1.5
    decision_factors['強度分數 (Strength Score)'] = strength_score

    kline_score = 0
    if 'ATRr_14' in latest.index and abs(latest['Close'] - latest['Open']) > 0.7 * latest['ATRr_14']:
        kline_score = 1.0 if latest['Close'] > latest['Open'] else -1.0
    decision_factors['K線分數 (Kline Score)'] = kline_score
    
    fa_normalized_score = 0
    if fa_score > 0:
      fa_normalized_score = (fa_score / 7) * 3 
    decision_factors['基本面分數 (FA Score)'] = fa_normalized_score
    
    total_score = sum(decision_factors.values())

    if total_score >= 4.0: action = "買進 (Buy)"
    elif 1.0 <= total_score < 4.0: action = "中性偏買 (Hold/Buy)"
    elif -1.0 < total_score < 1.0: action = "觀望 (Neutral)"
    elif -4.0 < total_score <= -1.0: action = "中性偏賣 (Hold/Sell)"
    else: action = "賣出 (Sell/Short)"

    confidence = min(int(abs(total_score) / 8.0 * 100), 100)
        
    return {'total_score': round(total_score, 2), 'action': action, 'confidence': confidence, 'factors': decision_factors}

def calculate_entry_price(action, latest):
    """
    根據 AI 行動建議計算建議的入場價位。
    """
    entry_price = "N/A"
    if 'Buy' in action:
        entry_price = latest.get('EMA_10', latest['Close'] * 0.995)
    elif 'Sell' in action:
        entry_price = latest.get('EMA_10', latest['Close'] * 1.005)
    
    if isinstance(entry_price, (int, float)):
        return round(entry_price, 2)
    return entry_price

def calculate_risk_management(df):
    """
    多策略共識止盈止損計算。
    """
    latest = df.iloc[-1]
    sl_prices, tp_prices = [], []

    if 'ATRr_14' in latest.index and pd.notna(latest['ATRr_14']):
        sl_prices.append(latest['Close'] - 2 * latest['ATRr_14'])
        tp_prices.append(latest['Close'] + 2 * latest['ATRr_14'])
    if 'BBL_20_2.0' in latest.index and 'BBU_20_2.0' in latest.index:
        sl_prices.append(latest['BBL_20_2.0'])
        tp_prices.append(latest['BBU_20_2.0'])
    if len(df) >= 30:
        recent_df = df.iloc[-30:]
        sl_prices.append(recent_df['Low'].min())
        tp_prices.append(recent_df['High'].max())

    if not sl_prices or not tp_prices:
        fallback_atr = latest.get('ATRr_14', latest['Close'] * 0.05)
        if pd.isna(fallback_atr): fallback_atr = latest['Close'] * 0.05
        return {'sl': round(latest['Close'] - 2 * fallback_atr, 2), 'tp': round(latest['Close'] + 2 * fallback_atr, 2)}

    return {'sl': round(np.mean(sorted(sl_prices, reverse=True)[:2]), 2), 'tp': round(np.mean(sorted(tp_prices)[:2]), 2)}

def run_backtest(df):
    """
    策略回測引擎: SMA 20 / EMA 50 均線交叉策略。
    """
    if 'EMA_50' not in df.columns: df.ta.ema(length=50, append=True)
    df['SMA_20'] = ta.sma(df['Close'], length=20)
    df.dropna(inplace=True)
    
    if df.empty: return {'total_return': 0, 'win_rate': 0, 'max_drawdown': 0, 'trades_count': 0, 'equity_curve': pd.Series([1.0])}

    df['signal'] = 0
    df.loc[(df['SMA_20'] > df['EMA_50']) & (df['SMA_20'].shift(1) <= df['EMA_50'].shift(1)), 'signal'] = 1
    df.loc[(df['SMA_20'] < df['EMA_50']) & (df['SMA_20'].shift(1) >= df['EMA_50'].shift(1)), 'signal'] = -1

    position, trades = 0, []
    for i, row in df.iterrows():
        if position == 0 and row['signal'] == 1:
            position, entry_price = 1, row['Close']
        elif position == 1 and row['signal'] == -1:
            position, exit_price = 0, row['Close']
            trades.append((exit_price / entry_price) - 1)

    if not trades: return {'total_return': 0, 'win_rate': 0, 'max_drawdown': 0, 'trades_count': 0, 'equity_curve': pd.Series([1.0])}
        
    equity = (pd.Series(trades) + 1).cumprod()
    max_drawdown = abs(((equity - equity.cummax()) / equity.cummax()).min()) * 100

    return {
        'total_return': round((equity.iloc[-1] - 1) * 100 if not equity.empty else 0, 2),
        'win_rate': round(len([t for t in trades if t > 0]) / len(trades) * 100 if trades else 0, 2),
        'max_drawdown': round(max_drawdown, 2),
        'trades_count': len(trades),
        'equity_curve': equity
    }

# --- 3. Streamlit 使用者介面 (UI) ---

with st.sidebar:
    st.image("https://storage.googleapis.com/gemini-prod/images/workspace_icon_for_light_background.png", width=80)
    st.header("⚙️ 分析設定")
    
    st.subheader("1. 選擇分析資產")
    
    def clear_manual_input():
        st.session_state.manual_input = ""

    asset_category = st.selectbox("資產類別", list(FULL_SYMBOLS_MAP.keys()), on_change=clear_manual_input)
    popular_assets = {f"{symbol} ({details['name']})": symbol for symbol, details in FULL_SYMBOLS_MAP[asset_category].items()}
    selected_popular = st.selectbox("熱門標的", list(popular_assets.keys()), on_change=clear_manual_input)
    manual_input = st.text_input("或手動輸入代碼 (優先使用)", placeholder="例如: 2330.TW, TSLA", key='manual_input')

    if st.session_state.manual_input and st.session_state.manual_input.strip():
        final_symbol = st.session_state.manual_input.strip().upper()
        all_symbols = {s: d['name'] for cat in FULL_SYMBOLS_MAP.values() for s, d in cat.items()}
        final_symbol_name = all_symbols.get(final_symbol, "未知代碼")
    else:
        final_symbol = popular_assets[selected_popular]
        final_symbol_name = FULL_SYMBOLS_MAP[asset_category][final_symbol]['name']
        
    st.info(f"當前目標: **{final_symbol} ({final_symbol_name})**")

    st.subheader("2. 選擇分析週期")
    selected_period_label = st.selectbox("時間週期", list(PERIOD_MAP.keys()))
    period_params = PERIOD_MAP[selected_period_label]

    # (NEW v2.0) 動態部位規模計算所需的輸入
    st.subheader("3. 風險偏好設定")
    total_capital = st.number_input("總資金 (用於部位計算)", min_value=1000, value=100000, step=1000)
    risk_per_trade = st.slider("單筆最大風險 (%)", 1.0, 5.0, 2.0, 0.5) / 100

    st.subheader("4. 執行分析")
    start_analysis_html = f"<p class='salmon-text'>📊 執行AI分析</p>"
    start_analysis = st.button("📊 執行AI分析", use_container_width=True)


st.markdown("<h1 class='salmon-text'>🚀 歡迎使用 AI 趨勢分析</h1>", unsafe_allow_html=True)
st.caption(f"數據更新時間: {pd.Timestamp.now('Asia/Taipei').strftime('%Y-%m-%d %H:%M:%S CST')}")

if start_analysis:
    with st.spinner('AI 分析引擎啟動中，請稍候...'):
        data = get_data(final_symbol, period_params['period'], period_params['interval'])

        if data is not None and not data.empty:
            data_with_indicators = calculate_indicators(data.copy())
            
            if data_with_indicators.empty or len(data_with_indicators) < 2:
                st.error("錯誤：計算技術指標後無有效數據，可能是歷史數據過短。請嘗試更長的分析週期。")
            else:
                funda_data = get_fundamental_data(final_symbol)
                funda_scores = calculate_fundamental_scores(funda_data['info'])
                ai_signal = generate_ai_fusion_signal(data_with_indicators, funda_scores['ai_score'])
                risk_levels = calculate_risk_management(data_with_indicators)
                entry_price = calculate_entry_price(ai_signal['action'], data_with_indicators.iloc[-1])
                backtest_results = run_backtest(data_with_indicators.copy())

                # (NEW v2.0) 計算建議部位規模
                position_size = "N/A"
                if isinstance(entry_price, (int, float)) and entry_price > risk_levels['sl']:
                    trade_risk_per_share = entry_price - risk_levels['sl']
                    max_risk_amount = total_capital * risk_per_trade
                    position_size = int(max_risk_amount / trade_risk_per_share)

                # --- [升級 v2.0] 互動式決策儀表板 ---
                st.markdown("---")
                funda_rating = f"基本面評級: {funda_scores['display_score']}/9" if funda_scores['display_score'] > 0 else "基本面評級: N/A"
                st.header(f"📈 {final_symbol_name} ({final_symbol}) - {selected_period_label} 分析報告")
                st.subheader(funda_rating)
                st.markdown("---")

                # 儀表板上半部: 核心決策
                col1, col2 = st.columns([1.5, 1])
                with col1:
                    st.subheader("🎯 核心行動與量化評分")
                    c1, c2, c3, c4 = st.columns(4)
                    c1.metric("當前價格", f"{data_with_indicators['Close'].iloc[-1]:,.2f}")
                    c2.metric("最終行動建議", ai_signal['action'])
                    c3.metric("總量化評分", f"{ai_signal['total_score']:.2f}")
                    c4.metric("信心指數", f"{ai_signal['confidence']}%")
                
                with col2:
                    st.subheader("🧠 AI 決策依據 (XAI)")
                    with st.expander("點擊查看各項因子得分"):
                        for factor, score in ai_signal['factors'].items():
                            st.markdown(f" - **{factor}:** `{score:.2f}`")

                st.markdown("---")

                # 儀表板下半部: 風險與實務
                st.subheader("🛡️ 精確交易策略與風險控制")
                col1, col2, col3, col4, col5 = st.columns(5)
                col1.metric("建議操作", ai_signal['action'].split(" ")[0])
                col2.metric("建議入場價", f"{entry_price:,.2f}" if isinstance(entry_price, (int, float)) else "N/A")
                col3.metric("建議部位規模", f"{position_size} 股/單位" if isinstance(position_size, int) else "N/A")
                col4.metric("共識止盈價 (TP)", f"{risk_levels['tp']:,.2f}", delta=f"{((risk_levels['tp']/data_with_indicators['Close'].iloc[-1])-1)*100:.2f}%")
                col5.metric("共識止損價 (SL)", f"{risk_levels['sl']:,.2f}", delta=f"{((risk_levels['sl']/data_with_indicators['Close'].iloc[-1])-1)*100:.2f}%", delta_color="inverse")
                
                st.markdown("---")

                # 完整技術分析圖表 (移至前方，更符合儀表板邏輯)
                st.subheader("📊 完整技術分析圖表")
                fig = make_subplots(rows=4, cols=1, shared_xaxes=True, vertical_spacing=0.03, row_heights=[0.5, 0.15, 0.15, 0.2])
                fig.add_trace(go.Candlestick(x=data_with_indicators.index, open=data_with_indicators['Open'], high=data_with_indicators['High'], low=data_with_indicators['Low'], close=data_with_indicators['Close'], name='K線'), row=1, col=1)
                fig.add_trace(go.Scatter(x=data_with_indicators.index, y=data_with_indicators['EMA_10'], mode='lines', name='EMA 10', line=dict(color='orange', width=1)), row=1, col=1)
                fig.add_trace(go.Scatter(x=data_with_indicators.index, y=data_with_indicators['EMA_50'], mode='lines', name='EMA 50', line=dict(color='blue', width=1)), row=1, col=1)
                fig.add_trace(go.Scatter(x=data_with_indicators.index, y=data_with_indicators['EMA_200'], mode='lines', name='EMA 200', line=dict(color='purple', width=2, dash='dash')), row=1, col=1)
                fig.add_trace(go.Bar(x=data_with_indicators.index, y=data_with_indicators['Volume'], name='成交量'), row=2, col=1)
                fig.add_trace(go.Bar(x=data_with_indicators.index, y=data_with_indicators['MACDh_12_26_9'], name='MACD Hist'), row=3, col=1)
                fig.add_trace(go.Scatter(x=data_with_indicators.index, y=data_with_indicators['RSI_14'], mode='lines', name='RSI 14'), row=4, col=1)
                fig.add_hline(y=70, line_dash="dash", row=4, col=1, line_color="red")
                fig.add_hline(y=30, line_dash="dash", row=4, col=1, line_color="green")
                fig.update_layout(height=800, xaxis_rangeslider_visible=False, legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))
                st.plotly_chart(fig, use_container_width=True)

                st.markdown("---")
                # 輔助資訊模組
                col_main, col_side = st.columns([1,1])
                with col_main:
                    st.subheader(f"🔙 策略回測報告 (SMA 20/50)")
                    c1, c2, c3, c4 = st.columns(4)
                    c1.metric("總回報率", f"{backtest_results['total_return']:.2f}%")
                    c2.metric("勝率", f"{backtest_results['win_rate']:.2f}%")
                    c3.metric("最大回撤", f"{backtest_results['max_drawdown']:.2f}%")
                    c4.metric("交易次數", backtest_results['trades_count'])
                with col_side:
                    st.subheader("📰 最新相關新聞")
                    for news_item in funda_data['news']:
                        title = news_item.get('title', '新聞標題不可用')
                        link = news_item.get('link')
                        if link: st.markdown(f"- [{title}]({link})")
                        else: st.markdown(f"- {title}")

else:
    # (NEW v2.0) 全新的歡迎頁面
    st.markdown("""
    <p>請在左側選擇或輸入您想分析的標的（例如：2330.TW、NVDA、BTC-USD），然後點擊 <span class='salmon-text'>『📊 執行AI分析』</span> 按鈕開始。</p>
    """, unsafe_allow_html=True)
    st.markdown("---")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("📝 使用步驟：")
        st.markdown("""
        1.  **選擇資產類別**：在左側欄選擇 `美股`、`台股` 或 `加密貨幣`。
        2.  **選擇標的**：使用下拉選單快速選擇熱門標的，或直接在輸入框中鍵入代碼或名稱。
        3.  **選擇週期**：決定分析的長度（例如：`30 分` (短期)、`1 日` (中長線)）。
        4.  **執行分析**：點擊 <span class='salmon-text'>『📊 執行AI分析』</span>，AI將融合基本面與技術面指標提供交易策略。
        """, unsafe_allow_html=True)

    with col2:
        st.subheader("⚠️ 免責聲明:")
        st.warning("""
        本分析模型包含多位AI的量化觀點，但僅供教育與參考用途。投資涉及風險，所有交易決策應基於您個人的獨立研究和財務狀況，並建議諮詢專業金融顧問。
        """)

    st.markdown("---")
    st.subheader("📊 數據來源:")
    st.info("Yahoo Finance | 技術指標: TA 庫 | APP優化: 專業程式碼專家")

